{"file_contents":{"README.md":{"content":"# ServiceMan-FrontEnd\n","size_bytes":22},"design_guidelines.md":{"content":"# ServiceMan Frontend Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from modern service platforms like Airbnb, Upwork, and TaskRabbit for intuitive service booking workflows, combined with clean dashboard patterns from Linear and Notion for admin/serviceman interfaces.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Light Mode: 219 85% 35% (deep blue)\n- Dark Mode: 219 70% 55% (lighter blue)\n\n**Supporting Colors:**\n- Success: 142 69% 58% (green for completed states)\n- Warning: 38 92% 50% (amber for pending states)\n- Emergency: 0 84% 60% (red for urgent requests)\n- Background Light: 0 0% 98%\n- Background Dark: 222 84% 5%\n\n### Typography\n**Font System:** Inter from Google Fonts\n- Headlines: 600-700 weight\n- Body text: 400-500 weight\n- UI elements: 500 weight\n\n### Layout System\n**Spacing Primitives:** Tailwind units of 2, 4, 6, 8, and 12\n- Micro spacing: p-2, m-2\n- Component spacing: p-4, gap-4\n- Section spacing: py-8, my-6\n- Large containers: p-12\n\n### Component Library\n\n**Navigation:**\n- Fixed glass-blur navbar with backdrop-blur-sm\n- Sticky positioning with subtle shadow on scroll\n- Category dropdown with hover states\n\n**Cards & Containers:**\n- Serviceman cards with subtle hover lift (transform scale-105)\n- Request status cards with color-coded borders\n- Dashboard panels with soft shadows\n\n**Interactive Elements:**\n- Primary buttons with the main blue palette\n- Outline buttons with blurred backgrounds when over images\n- Emergency badges with red background and subtle pulse animation\n- Star ratings with gold fill states\n\n**Data Display:**\n- Status indicators with color-coded dots\n- Progress indicators for multi-step flows\n- Rating displays with star icons\n\n### Animations\n**Framer Motion Implementation:**\n- Page transitions: slide and fade\n- Modal entrances: scale from 0.95 to 1\n- Emergency pulse: subtle 1.5s infinite animation\n- Hover lifts: 0.2s spring transitions\n\n## Visual Hierarchy\n\n**Landing Page Structure:**\n1. Hero section with service overview and main CTA\n2. Featured categories grid (4-6 categories)\n3. Top-rated servicemen showcase (4-5 cards)\n4. Trust indicators and how-it-works section\n\n**Dashboard Layouts:**\n- Sidebar navigation for role-specific actions\n- Main content area with cards/tables\n- Status indicators prominently displayed\n- Quick actions easily accessible\n\n## Emergency Request Handling\n- Red color treatment (0 84% 60%)\n- Pulsing border animation on cards\n- Priority badges with elevated visual weight\n- Distinct notification styling\n\n## Responsive Design\n- Mobile-first approach with breakpoints at sm, md, lg, xl\n- Collapsible navigation for mobile\n- Card layouts that stack on smaller screens\n- Touch-friendly interactive elements (minimum 44px)\n\n## Images\n**Hero Section:** Large background image showcasing service professionals at work, with blurred button overlays for CTAs\n**Category Cards:** Icon-based representations rather than photos for consistency\n**Serviceman Profiles:** Professional headshot placeholders with consistent aspect ratios\n**Trust Indicators:** Simple illustrated icons for process steps and guarantees\n\nThe hero image should be prominent but not overwhelming, approximately 60vh on desktop and 40vh on mobile, with a subtle gradient overlay for text readability.","size_bytes":3315},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"ui-sans-serif\", \"system-ui\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"emergency-pulse\": {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.7\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"emergency-pulse\": \"emergency-pulse 1.5s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4258},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"// Simple frontend-only server - just run Vite dev server directly\nimport { exec } from 'child_process';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconsole.log('[server] starting frontend-only mode');\nconsole.log('[server] API calls should go to Django backend at VITE_API_URL');\n\n// Run Vite from root directory with config file\nconst viteProcess = exec('npx vite --config vite.config.ts --host 0.0.0.0 --port 5000', {\n  cwd: path.join(__dirname, '..')\n}, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`Error starting Vite: ${error}`);\n    return;\n  }\n  console.log(stdout);\n  if (stderr) console.error(stderr);\n});\n\nviteProcess.stdout?.on('data', (data) => {\n  console.log(data.toString());\n});\n\nviteProcess.stderr?.on('data', (data) => {\n  console.error(data.toString());\n});\n\nprocess.on('SIGINT', () => {\n  console.log('\\n[server] shutting down...');\n  viteProcess.kill();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('\\n[server] shutting down...');\n  viteProcess.kill();\n  process.exit(0);\n});","size_bytes":1153},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"next-themes\";\n\n// Context\nimport { AuthProvider, useAuth } from \"@/contexts/AuthContext\";\n\n// Layout\nimport Layout from \"@/components/layout/Layout\";\n\n// Pages\nimport Landing from \"@/components/Landing\";\nimport LoginForm from \"@/components/LoginForm\";\nimport RegisterForm from \"@/components/RegisterForm\";\nimport NotFound from \"@/pages/not-found\";\n\n// Import queryClient\nimport { queryClient } from \"./lib/queryClient\";\n\nfunction Router() {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Layout user={user}>\n      <Switch>\n        {/* Landing page */}\n        <Route path=\"/\" component={Landing} />\n        \n        {/* Authentication routes */}\n        <Route path=\"/login\" component={LoginForm} />\n        <Route path=\"/register\" component={RegisterForm} />\n        \n        {/* Browse servicemen */}\n        <Route path=\"/browse\" component={() => <div className=\"p-8 text-center\">Browse Servicemen - Coming Soon</div>} />\n        <Route path=\"/hire\" component={() => <div className=\"p-8 text-center\">Hire Service - Coming Soon</div>} />\n        \n        {/* Client routes */}\n        <Route path=\"/client/dashboard\" component={() => <div className=\"p-8 text-center\">Client Dashboard - Coming Soon</div>} />\n        \n        {/* Serviceman routes */}\n        <Route path=\"/serviceman/dashboard\" component={() => <div className=\"p-8 text-center\">Serviceman Dashboard - Coming Soon</div>} />\n        \n        {/* Admin routes */}\n        <Route path=\"/admin/dashboard\" component={() => <div className=\"p-8 text-center\">Admin Dashboard - Coming Soon</div>} />\n        \n        {/* Static pages */}\n        <Route path=\"/categories\" component={() => <div className=\"p-8 text-center\">Categories Page - Coming Soon</div>} />\n        <Route path=\"/how-it-works\" component={() => <div className=\"p-8 text-center\">How It Works - Coming Soon</div>} />\n        <Route path=\"/pricing\" component={() => <div className=\"p-8 text-center\">Pricing - Coming Soon</div>} />\n        <Route path=\"/safety\" component={() => <div className=\"p-8 text-center\">Safety & Trust - Coming Soon</div>} />\n        <Route path=\"/help\" component={() => <div className=\"p-8 text-center\">Help Center - Coming Soon</div>} />\n        <Route path=\"/contact\" component={() => <div className=\"p-8 text-center\">Contact Us - Coming Soon</div>} />\n        <Route path=\"/terms\" component={() => <div className=\"p-8 text-center\">Terms of Service - Coming Soon</div>} />\n        <Route path=\"/privacy\" component={() => <div className=\"p-8 text-center\">Privacy Policy - Coming Soon</div>} />\n        \n        {/* 404 fallback */}\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"light\" enableSystem>\n        <TooltipProvider>\n          <AuthProvider>\n            <Toaster />\n            <Router />\n          </AuthProvider>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}","size_bytes":3503},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 14% 18%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 220 14% 18%;\n\n  --card-border: 220 13% 88%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 220 14% 18%;\n\n  --sidebar-border: 220 13% 85%;\n\n  --sidebar-primary: 219 85% 35%;\n\n  --sidebar-primary-foreground: 219 85% 95%;\n\n  --sidebar-accent: 0 0% 88%;\n\n  --sidebar-accent-foreground: 220 14% 18%;\n\n  --sidebar-ring: 219 85% 35%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 220 14% 18%;\n\n  --popover-border: 220 13% 82%;\n\n  --primary: 219 85% 35%;\n\n  --primary-foreground: 219 85% 95%;\n\n  --secondary: 0 0% 89%;\n\n  --secondary-foreground: 220 14% 18%;\n\n  --muted: 220 6% 86%;\n\n  --muted-foreground: 220 10% 45%;\n\n  --accent: 219 15% 84%;\n\n  --accent-foreground: 220 14% 18%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 84% 95%;\n\n  --input: 220 13% 75%;\n  --ring: 219 85% 35%;\n  --chart-1: 219 85% 35%;\n  --chart-2: 142 69% 30%;\n  --chart-3: 38 92% 35%;\n  --chart-4: 267 57% 35%;\n  --chart-5: 173 58% 35%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(219 85% 35% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(219 85% 35% / 0.08);\n  --shadow-sm: 0px 2px 0px 0px hsl(219 85% 35% / 0.05), 0px 1px 2px -1px hsl(219 85% 35% / 0.10);\n  --shadow: 0px 2px 0px 0px hsl(219 85% 35% / 0.05), 0px 1px 2px -1px hsl(219 85% 35% / 0.10);\n  --shadow-md: 0px 2px 0px 0px hsl(219 85% 35% / 0.05), 0px 2px 4px -1px hsl(219 85% 35% / 0.15);\n  --shadow-lg: 0px 2px 0px 0px hsl(219 85% 35% / 0.05), 0px 4px 6px -1px hsl(219 85% 35% / 0.20);\n  --shadow-xl: 0px 2px 0px 0px hsl(219 85% 35% / 0.05), 0px 8px 10px -1px hsl(219 85% 35% / 0.25);\n  --shadow-2xl: 0px 2px 0px 0px hsl(219 85% 35% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 84% 5%;\n\n  --foreground: 220 14% 85%;\n\n  --border: 222 84% 9%;\n\n  --card: 222 84% 7%;\n\n  --card-foreground: 220 14% 85%;\n\n  --card-border: 222 84% 11%;\n\n  --sidebar: 222 84% 9%;\n\n  --sidebar-foreground: 220 14% 85%;\n\n  --sidebar-border: 222 84% 13%;\n\n  --sidebar-primary: 219 70% 55%;\n\n  --sidebar-primary-foreground: 219 70% 10%;\n\n  --sidebar-accent: 222 84% 11%;\n\n  --sidebar-accent-foreground: 220 14% 85%;\n\n  --sidebar-ring: 219 70% 55%;\n\n  --popover: 222 84% 11%;\n\n  --popover-foreground: 220 14% 85%;\n\n  --popover-border: 222 84% 15%;\n\n  --primary: 219 70% 55%;\n\n  --primary-foreground: 219 70% 10%;\n\n  --secondary: 222 84% 13%;\n\n  --secondary-foreground: 220 14% 85%;\n\n  --muted: 222 84% 15%;\n\n  --muted-foreground: 220 10% 65%;\n\n  --accent: 219 15% 18%;\n\n  --accent-foreground: 220 14% 85%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 84% 10%;\n\n  --input: 222 84% 17%;\n  --ring: 219 70% 55%;\n  --chart-1: 219 70% 55%;\n  --chart-2: 142 69% 58%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 267 57% 65%;\n  --chart-5: 173 58% 55%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(219 70% 55% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(219 70% 55% / 0.08);\n  --shadow-sm: 0px 2px 0px 0px hsl(219 70% 55% / 0.05), 0px 1px 2px -1px hsl(219 70% 55% / 0.10);\n  --shadow: 0px 2px 0px 0px hsl(219 70% 55% / 0.05), 0px 1px 2px -1px hsl(219 70% 55% / 0.10);\n  --shadow-md: 0px 2px 0px 0px hsl(219 70% 55% / 0.05), 0px 2px 4px -1px hsl(219 70% 55% / 0.15);\n  --shadow-lg: 0px 2px 0px 0px hsl(219 70% 55% / 0.05), 0px 4px 6px -1px hsl(219 70% 55% / 0.20);\n  --shadow-xl: 0px 2px 0px 0px hsl(219 70% 55% / 0.05), 0px 8px 10px -1px hsl(219 70% 55% / 0.25);\n  --shadow-2xl: 0px 2px 0px 0px hsl(219 70% 55% / 0.25);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9850},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ApplicationCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  User, \n  Mail, \n  Phone, \n  MapPin, \n  Calendar,\n  Award,\n  CheckCircle,\n  XCircle,\n  Clock\n} from \"lucide-react\";\n\ninterface ApplicationCardProps {\n  application: {\n    id: number;\n    applicant: {\n      name: string;\n      email: string;\n      phone: string;\n      address: string;\n      avatar?: string;\n    };\n    qualifications: string;\n    yearsOfExperience: number;\n    categories: string[];\n    appliedDate: string;\n    status: 'pending' | 'approved' | 'rejected';\n  };\n  onApprove?: (id: number) => void;\n  onReject?: (id: number) => void;\n  onViewDetails?: (id: number) => void;\n}\n\nexport default function ApplicationCard({ \n  application, \n  onApprove, \n  onReject, \n  onViewDetails \n}: ApplicationCardProps) {\n  const getStatusConfig = (status: 'pending' | 'approved' | 'rejected') => {\n    const configs = {\n      pending: { color: \"bg-yellow-500\", text: \"Pending Review\" },\n      approved: { color: \"bg-green-500\", text: \"Approved\" },\n      rejected: { color: \"bg-red-500\", text: \"Rejected\" }\n    };\n    return configs[status] || configs.pending;\n  };\n\n  const statusConfig = getStatusConfig(application.status);\n\n  const handleApprove = () => {\n    if (onApprove) {\n      onApprove(application.id);\n      console.log('Approve application:', application.id);\n    }\n  };\n\n  const handleReject = () => {\n    if (onReject) {\n      onReject(application.id);\n      console.log('Reject application:', application.id);\n    }\n  };\n\n  const handleViewDetails = () => {\n    if (onViewDetails) {\n      onViewDetails(application.id);\n      console.log('View application details:', application.id);\n    }\n  };\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`application-card-${application.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"h-12 w-12\">\n              <AvatarImage src={application.applicant.avatar} alt={application.applicant.name} />\n              <AvatarFallback>{application.applicant.name.charAt(0)}</AvatarFallback>\n            </Avatar>\n            <div>\n              <CardTitle className=\"text-lg\">{application.applicant.name}</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Application #{application.id}\n              </p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" className={`${statusConfig.color} text-white`}>\n            {statusConfig.text}\n          </Badge>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Contact Information */}\n        <div className=\"grid grid-cols-1 gap-2 text-sm\">\n          <div className=\"flex items-center text-muted-foreground\">\n            <Mail className=\"h-4 w-4 mr-2\" />\n            <span>{application.applicant.email}</span>\n          </div>\n          <div className=\"flex items-center text-muted-foreground\">\n            <Phone className=\"h-4 w-4 mr-2\" />\n            <span>{application.applicant.phone}</span>\n          </div>\n          <div className=\"flex items-center text-muted-foreground\">\n            <MapPin className=\"h-4 w-4 mr-2\" />\n            <span className=\"truncate\">{application.applicant.address}</span>\n          </div>\n        </div>\n\n        {/* Experience */}\n        <div className=\"flex items-center space-x-4 text-sm\">\n          <div className=\"flex items-center\">\n            <Award className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n            <span>{application.yearsOfExperience} years experience</span>\n          </div>\n          <div className=\"flex items-center\">\n            <Calendar className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n            <span>Applied {new Date(application.appliedDate).toLocaleDateString()}</span>\n          </div>\n        </div>\n\n        {/* Categories */}\n        <div className=\"space-y-2\">\n          <h4 className=\"font-medium text-sm\">Service Categories:</h4>\n          <div className=\"flex flex-wrap gap-1\">\n            {application.categories.map((category, index) => (\n              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                {category}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        {/* Qualifications */}\n        <div className=\"space-y-2\">\n          <h4 className=\"font-medium text-sm\">Qualifications:</h4>\n          <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded-lg\">\n            {application.qualifications}\n          </p>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2 pt-2\">\n          {application.status === 'pending' ? (\n            <>\n              <Button\n                size=\"sm\"\n                onClick={handleApprove}\n                className=\"flex-1\"\n                data-testid={`button-approve-${application.id}`}\n              >\n                <CheckCircle className=\"h-4 w-4 mr-1\" />\n                Approve\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={handleReject}\n                className=\"flex-1\"\n                data-testid={`button-reject-${application.id}`}\n              >\n                <XCircle className=\"h-4 w-4 mr-1\" />\n                Reject\n              </Button>\n            </>\n          ) : (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={handleViewDetails}\n              className=\"flex-1\"\n              data-testid={`button-view-details-${application.id}`}\n            >\n              <User className=\"h-4 w-4 mr-1\" />\n              View Details\n            </Button>\n          )}\n        </div>\n\n        {/* Status Message */}\n        {application.status !== 'pending' && (\n          <div className=\"p-3 bg-muted/50 rounded-lg\">\n            <p className=\"text-sm text-muted-foreground\">\n              <Clock className=\"h-4 w-4 inline mr-1\" />\n              {application.status === 'approved' \n                ? \"Applicant has been notified and can proceed to physical verification\"\n                : \"Application has been rejected and applicant has been notified\"\n              }\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6533},"client/src/components/EmergencyBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle } from \"lucide-react\";\n\ninterface EmergencyBadgeProps {\n  className?: string;\n}\n\nexport default function EmergencyBadge({ className = \"\" }: EmergencyBadgeProps) {\n  return (\n    <Badge \n      variant=\"destructive\" \n      className={`animate-emergency-pulse ${className}`}\n      data-testid=\"emergency-badge\"\n    >\n      <AlertTriangle className=\"mr-1 h-3 w-3\" />\n      Emergency\n    </Badge>\n  );\n}","size_bytes":468},"client/src/components/EstimateForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Calculator, Clock, DollarSign } from \"lucide-react\";\n\ninterface EstimateFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  job: {\n    id: number;\n    client: {\n      name: string;\n      avatar?: string;\n    };\n    category: string;\n    description?: string;\n    isEmergency: boolean;\n    consultationFee: number;\n  };\n  onSubmit?: (estimate: { jobId: number; amount: number; breakdown: string; timeEstimate: string }) => void;\n}\n\nexport default function EstimateForm({ open, onOpenChange, job, onSubmit }: EstimateFormProps) {\n  const [formData, setFormData] = useState({\n    materialCost: \"\",\n    laborCost: \"\",\n    timeEstimate: \"\",\n    breakdown: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const materialCost = parseFloat(formData.materialCost) || 0;\n  const laborCost = parseFloat(formData.laborCost) || 0;\n  const totalCost = materialCost + laborCost;\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (totalCost <= 0) {\n      alert(\"Please enter valid cost estimates\");\n      return;\n    }\n\n    if (!formData.timeEstimate.trim()) {\n      alert(\"Please provide a time estimate\");\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    const estimate = {\n      jobId: job.id,\n      amount: totalCost,\n      breakdown: formData.breakdown || `Materials: ₦${materialCost.toLocaleString()}, Labor: ₦${laborCost.toLocaleString()}`,\n      timeEstimate: formData.timeEstimate\n    };\n\n    console.log('Submitting estimate:', estimate);\n    \n    if (onSubmit) {\n      onSubmit(estimate);\n    }\n\n    // Simulate API call\n    setTimeout(() => {\n      setIsSubmitting(false);\n      onOpenChange(false);\n      // Reset form\n      setFormData({\n        materialCost: \"\",\n        laborCost: \"\",\n        timeEstimate: \"\",\n        breakdown: \"\"\n      });\n    }, 2000);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"estimate-form-modal\">\n        <DialogHeader>\n          <DialogTitle>Submit Cost Estimate</DialogTitle>\n          <DialogDescription>\n            Provide a detailed estimate for Job #{job.id}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Job Summary */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarImage src={job.client.avatar} alt={job.client.name} />\n                  <AvatarFallback>{job.client.name.charAt(0)}</AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold\">{job.client.name}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{job.category}</p>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Badge variant=\"secondary\">Job #{job.id}</Badge>\n                    {job.isEmergency && (\n                      <Badge variant=\"destructive\">Emergency</Badge>\n                    )}\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-sm text-muted-foreground\">Consultation Fee</div>\n                  <div className=\"font-semibold\">₦{job.consultationFee.toLocaleString()}</div>\n                </div>\n              </div>\n              \n              {job.description && (\n                <div className=\"mt-3 p-3 bg-muted rounded-lg\">\n                  <p className=\"text-sm\">\n                    <strong>Description:</strong> {job.description}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Cost Breakdown */}\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold flex items-center\">\n                <Calculator className=\"h-4 w-4 mr-2\" />\n                Cost Breakdown\n              </h3>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"material-cost\">Material Cost (₦)</Label>\n                  <Input\n                    id=\"material-cost\"\n                    name=\"materialCost\"\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"100\"\n                    placeholder=\"0\"\n                    value={formData.materialCost}\n                    onChange={handleInputChange}\n                    data-testid=\"input-material-cost\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"labor-cost\">Labor Cost (₦)</Label>\n                  <Input\n                    id=\"labor-cost\"\n                    name=\"laborCost\"\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"100\"\n                    placeholder=\"0\"\n                    value={formData.laborCost}\n                    onChange={handleInputChange}\n                    data-testid=\"input-labor-cost\"\n                  />\n                </div>\n              </div>\n\n              {/* Total Display */}\n              <Card className=\"bg-primary/5 border-primary/20\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"font-semibold\">Total Estimate:</span>\n                    <span className=\"text-2xl font-bold text-primary\">\n                      ₦{totalCost.toLocaleString()}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Time Estimate */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"time-estimate\" className=\"flex items-center\">\n                <Clock className=\"h-4 w-4 mr-2\" />\n                Estimated Completion Time\n              </Label>\n              <Input\n                id=\"time-estimate\"\n                name=\"timeEstimate\"\n                type=\"text\"\n                placeholder=\"e.g., 2-3 days, 1 week, etc.\"\n                value={formData.timeEstimate}\n                onChange={handleInputChange}\n                required\n                data-testid=\"input-time-estimate\"\n              />\n            </div>\n\n            {/* Additional Details */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"breakdown\">Detailed Breakdown (Optional)</Label>\n              <Textarea\n                id=\"breakdown\"\n                name=\"breakdown\"\n                placeholder=\"Provide additional details about the work, materials needed, timeline, etc.\"\n                value={formData.breakdown}\n                onChange={handleInputChange}\n                rows={4}\n                data-testid=\"input-breakdown\"\n              />\n            </div>\n\n            {/* Important Notes */}\n            <Card className=\"bg-muted/50\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"font-medium mb-2\">Important Notes:</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>• This estimate will be reviewed by admin before final pricing</li>\n                  <li>• Admin may apply markup based on company policies</li>\n                  <li>• Final cost will be communicated to the client for approval</li>\n                  <li>• You'll be notified once client confirms payment</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Submit Button */}\n            <div className=\"flex gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-estimate\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting || totalCost <= 0}\n                className=\"flex-1\"\n                data-testid=\"button-submit-estimate\"\n              >\n                {isSubmitting ? (\n                  \"Submitting...\"\n                ) : (\n                  <>\n                    <DollarSign className=\"h-4 w-4 mr-2\" />\n                    Submit Estimate\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9369},"client/src/components/FeaturedCategories.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Hammer, \n  Zap, \n  Wrench, \n  Paintbrush, \n  Sparkles, \n  Scissors,\n  Settings,\n  Home,\n  Car\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/services/api\";\nimport { Category } from \"@/types\";\n\n// Icon mapping for categories\nconst iconMap: Record<string, any> = {\n  'Carpentry': Hammer,\n  'Electrical': Zap,\n  'Plumbing': Wrench,\n  'Painting': Paintbrush,\n  'Cleaning': Sparkles,\n  'Landscaping': Scissors,\n  'General': Settings,\n  'Home Repair': Home,\n  'Automotive': Car,\n};\n\nconst colorMap: Record<string, string> = {\n  'Carpentry': 'bg-orange-500',\n  'Electrical': 'bg-yellow-500',\n  'Plumbing': 'bg-blue-500',\n  'Painting': 'bg-purple-500',\n  'Cleaning': 'bg-green-500',\n  'Landscaping': 'bg-emerald-500',\n  'General': 'bg-gray-500',\n  'Home Repair': 'bg-red-500',\n  'Automotive': 'bg-indigo-500',\n};\n\nexport default function FeaturedCategories() {\n  const [, setLocation] = useLocation();\n  \n  // Fetch categories from API or use mock data in DEV mode\n  const { data: apiCategories, isLoading } = useQuery({\n    queryKey: ['/categories'],\n    queryFn: () => api.getCategories(),\n  });\n\n  // Mock data for DEV mode\n  const mockCategories: Category[] = [\n    {\n      id: 1,\n      name: \"Carpentry\",\n      description: \"Custom furniture, repairs, installations\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: 2,\n      name: \"Electrical\",\n      description: \"Wiring, repairs, installations, safety\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: 3,\n      name: \"Plumbing\",\n      description: \"Repairs, installations, maintenance\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: 4,\n      name: \"Painting\",\n      description: \"Interior, exterior, decorative work\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: 5,\n      name: \"Cleaning\",\n      description: \"Deep cleaning, maintenance, organizing\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: 6,\n      name: \"Landscaping\",\n      description: \"Garden design, maintenance, tree care\",\n      created_at: new Date().toISOString(),\n    }\n  ];\n\n  const categories = import.meta.env.VITE_DEV_MODE === \"true\" \n    ? mockCategories \n    : (apiCategories || []);\n\n  const handleCategoryClick = (categoryId: number) => {\n    setLocation(`/browse?category=${categoryId}`);\n  };\n\n  return (\n    <section className=\"py-16 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold mb-4\">Popular Service Categories</h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Find skilled professionals across our most requested service categories\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {isLoading ? (\n            // Loading skeletons\n            Array.from({ length: 6 }).map((_, index) => (\n              <Card key={index} className=\"p-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <Skeleton className=\"h-12 w-12 rounded-lg\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <Skeleton className=\"h-5 w-24\" />\n                    <Skeleton className=\"h-4 w-full\" />\n                    <div className=\"flex items-center space-x-3\">\n                      <Skeleton className=\"h-5 w-16\" />\n                      <Skeleton className=\"h-4 w-12\" />\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))\n          ) : (\n            categories.slice(0, 6).map((category) => {\n              const IconComponent = iconMap[category.name] || Settings;\n              const colorClass = colorMap[category.name] || 'bg-gray-500';\n              \n              return (\n                <Card \n                  key={category.id} \n                  className=\"hover-elevate cursor-pointer group\"\n                  onClick={() => handleCategoryClick(category.id)}\n                  data-testid={`category-card-${category.name.toLowerCase()}`}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className={`${colorClass} p-3 rounded-lg text-white group-hover:scale-110 transition-transform`}>\n                        <IconComponent className=\"h-6 w-6\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-lg mb-1\">{category.name}</h3>\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          {category.description}\n                        </p>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Badge variant=\"secondary\">\n                              View Professionals\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })\n          )}\n        </div>\n\n        <div className=\"text-center mt-8\">\n          <Link href=\"/categories\">\n            <button \n              className=\"text-primary hover:underline font-medium\"\n              data-testid=\"button-view-all-categories\"\n            >\n              View all categories →\n            </button>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5879},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Briefcase, Mail, Phone, MapPin } from \"lucide-react\";\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"bg-card border-t\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand & Description */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Briefcase className=\"h-6 w-6 text-primary\" />\n              <span className=\"text-xl font-bold\">ServiceMan</span>\n            </div>\n            <p className=\"text-muted-foreground\">\n              Connecting you with verified professional servicemen for all your needs. \n              Quality service, trusted expertise.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-facebook\">\n                Facebook\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-twitter\">\n                Twitter\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-instagram\">\n                Instagram\n              </a>\n            </div>\n          </div>\n\n          {/* For Clients */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">For Clients</h3>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>\n                <Link href=\"/browse\" className=\"hover:text-primary\" data-testid=\"link-browse-services\">\n                  Browse Services\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/how-it-works\" className=\"hover:text-primary\" data-testid=\"link-how-it-works\">\n                  How It Works\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/pricing\" className=\"hover:text-primary\" data-testid=\"link-pricing\">\n                  Pricing\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/safety\" className=\"hover:text-primary\" data-testid=\"link-safety\">\n                  Safety & Trust\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* For Servicemen */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">For Servicemen</h3>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>\n                <Link href=\"/register\" className=\"hover:text-primary\" data-testid=\"link-become-pro\">\n                  Become a Pro\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/serviceman/guide\" className=\"hover:text-primary\" data-testid=\"link-pro-guide\">\n                  Pro Guide\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/serviceman/resources\" className=\"hover:text-primary\" data-testid=\"link-resources\">\n                  Resources\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/serviceman/community\" className=\"hover:text-primary\" data-testid=\"link-community\">\n                  Community\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Support & Contact */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Support</h3>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>\n                <Link href=\"/help\" className=\"hover:text-primary\" data-testid=\"link-help\">\n                  Help Center\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"hover:text-primary\" data-testid=\"link-contact\">\n                  Contact Us\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms\" className=\"hover:text-primary\" data-testid=\"link-terms\">\n                  Terms of Service\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/privacy\" className=\"hover:text-primary\" data-testid=\"link-privacy\">\n                  Privacy Policy\n                </Link>\n              </li>\n            </ul>\n\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-2\">\n                <Mail className=\"h-4 w-4\" />\n                <span>support@serviceman.ng</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Phone className=\"h-4 w-4\" />\n                <span>+234 800 SERVICE</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <MapPin className=\"h-4 w-4\" />\n                <span>Lagos, Nigeria</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t mt-8 pt-8 text-center text-muted-foreground\">\n          <p>&copy; {currentYear} ServiceMan. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":5215},"client/src/components/Hero.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Star, Users, CheckCircle } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport heroImage from \"@assets/generated_images/ServiceMan_hero_background_image_8a80d7a1.png\";\n\nexport default function Hero() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [, setLocation] = useLocation();\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      setLocation(`/browse?search=${encodeURIComponent(searchQuery.trim())}`);\n    }\n  };\n\n  return (\n    <section \n      className=\"relative h-[60vh] min-h-[500px] bg-cover bg-center bg-no-repeat\"\n      style={{\n        backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(${heroImage})`\n      }}\n    >\n      <div className=\"absolute inset-0 flex items-center\">\n        <div className=\"container mx-auto px-4\">\n          <motion.div \n            className=\"max-w-2xl text-white\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <motion.h1 \n              className=\"mb-6 text-5xl font-bold leading-tight\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              Find Professional <span className=\"text-primary-foreground\">Servicemen</span> Near You\n            </motion.h1>\n            <motion.p \n              className=\"mb-8 text-xl opacity-90\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n            >\n              Connect with verified, skilled professionals for all your home and business needs. \n              Quality service, trusted expertise.\n            </motion.p>\n\n            {/* Search Form */}\n            <motion.form \n              onSubmit={handleSearch} \n              className=\"mb-8\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.6 }}\n            >\n              <div className=\"flex gap-2\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-gray-400\" />\n                  <Input\n                    type=\"search\"\n                    placeholder=\"What service do you need? (e.g., plumber, electrician, carpenter)\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"h-12 pl-10 text-lg backdrop-blur-sm bg-white/10 border-white/20 text-white placeholder:text-white/70\"\n                    data-testid=\"input-hero-search\"\n                  />\n                </div>\n                <Button \n                  type=\"submit\" \n                  size=\"lg\" \n                  className=\"h-12 px-8 bg-primary border-primary-border\"\n                  data-testid=\"button-hero-search\"\n                >\n                  Search\n                </Button>\n              </div>\n            </motion.form>\n\n            {/* CTA Buttons */}\n            <motion.div \n              className=\"flex flex-wrap gap-4 mb-8\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.8 }}\n            >\n              <Button \n                size=\"lg\" \n                className=\"bg-white text-primary hover:bg-white/90\"\n                asChild\n                data-testid=\"button-hire-professional\"\n              >\n                <Link href=\"/browse\">Hire a Professional</Link>\n              </Button>\n              <Button \n                size=\"lg\" \n                variant=\"outline\" \n                className=\"border-white text-white bg-black/20 backdrop-blur-sm hover:bg-white/10\"\n                asChild\n                data-testid=\"button-become-serviceman\"\n              >\n                <Link href=\"/register\">Become a Serviceman</Link>\n              </Button>\n            </motion.div>\n\n            {/* Trust Indicators */}\n            <motion.div \n              className=\"flex flex-wrap items-center gap-6 text-sm\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 1.0 }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"h-4 w-4\" />\n                <span>10,000+ Verified Professionals</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                <span>4.8 Average Rating</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4\" />\n                <span>Background Checked</span>\n              </div>\n            </motion.div>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5274},"client/src/components/JobCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Calendar, \n  MapPin, \n  Phone, \n  Clock, \n  DollarSign,\n  Play,\n  CheckCircle,\n  AlertTriangle,\n  User\n} from \"lucide-react\";\nimport EmergencyBadge from \"./EmergencyBadge\";\n\ninterface JobCardProps {\n  job: {\n    id: number;\n    client: {\n      name: string;\n      phone: string;\n      avatar?: string;\n    };\n    category: string;\n    requestedDate: string;\n    status: 'notified' | 'estimate_submitted' | 'confirmed' | 'in_progress' | 'completed';\n    isEmergency: boolean;\n    description?: string;\n    consultationFee: number;\n    estimatedCost?: number;\n    finalCost?: number;\n    location: string;\n  };\n  onReportCost?: (jobId: number) => void;\n  onStartJob?: (jobId: number) => void;\n  onCompleteJob?: (jobId: number) => void;\n  onContactClient?: (phone: string) => void;\n}\n\nexport default function JobCard({ job, onReportCost, onStartJob, onCompleteJob, onContactClient }: JobCardProps) {\n  const getStatusConfig = (status: 'notified' | 'estimate_submitted' | 'confirmed' | 'in_progress' | 'completed') => {\n    const configs = {\n      notified: { \n        color: \"bg-blue-500\", \n        text: \"New Job\", \n        description: \"Visit client and provide estimate\" \n      },\n      estimate_submitted: { \n        color: \"bg-yellow-500\", \n        text: \"Estimate Submitted\", \n        description: \"Waiting for admin to set final cost\" \n      },\n      confirmed: { \n        color: \"bg-green-500\", \n        text: \"Payment Confirmed\", \n        description: \"Ready to start work\" \n      },\n      in_progress: { \n        color: \"bg-orange-500\", \n        text: \"In Progress\", \n        description: \"Work is ongoing\" \n      },\n      completed: { \n        color: \"bg-gray-500\", \n        text: \"Completed\", \n        description: \"Job finished successfully\" \n      }\n    };\n    return configs[status] || configs.notified;\n  };\n\n  const statusConfig = getStatusConfig(job.status);\n\n  const handleContactClient = () => {\n    if (onContactClient) {\n      onContactClient(job.client.phone);\n      console.log('Contact client:', job.client.phone);\n    }\n  };\n\n  const handleReportCost = () => {\n    if (onReportCost) {\n      onReportCost(job.id);\n      console.log('Report cost for job:', job.id);\n    }\n  };\n\n  const handleStartJob = () => {\n    if (onStartJob) {\n      onStartJob(job.id);\n      console.log('Start job:', job.id);\n    }\n  };\n\n  const handleCompleteJob = () => {\n    if (onCompleteJob) {\n      onCompleteJob(job.id);\n      console.log('Complete job:', job.id);\n    }\n  };\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`job-card-${job.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center space-x-2\">\n              <CardTitle className=\"text-lg\">Job #{job.id}</CardTitle>\n              {job.isEmergency && <EmergencyBadge />}\n            </div>\n            <Badge variant=\"secondary\" className={`${statusConfig.color} text-white`}>\n              {statusConfig.text}\n            </Badge>\n          </div>\n          <div className=\"text-right text-sm text-muted-foreground\">\n            <div>₦{job.consultationFee.toLocaleString()} consultation</div>\n            {job.finalCost && (\n              <div className=\"font-semibold text-foreground\">\n                ₦{job.finalCost.toLocaleString()} total\n              </div>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Client Info */}\n        <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarImage src={job.client.avatar} alt={job.client.name} />\n            <AvatarFallback>{job.client.name.charAt(0)}</AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1\">\n            <h3 className=\"font-medium\">{job.client.name}</h3>\n            <p className=\"text-sm text-muted-foreground\">{job.category}</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={handleContactClient}\n            data-testid={`button-contact-${job.id}`}\n          >\n            <Phone className=\"h-3 w-3 mr-1\" />\n            Call\n          </Button>\n        </div>\n\n        {/* Job Details */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            <span>Requested: {new Date(job.requestedDate).toLocaleDateString()}</span>\n          </div>\n          \n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <MapPin className=\"h-4 w-4 mr-2\" />\n            <span>{job.location}</span>\n          </div>\n\n          {job.description && (\n            <div className=\"text-sm\">\n              <strong>Description:</strong> {job.description}\n            </div>\n          )}\n        </div>\n\n        {/* Status Description */}\n        <div className=\"p-3 bg-muted/50 rounded-lg\">\n          <p className=\"text-sm text-muted-foreground\">\n            <Clock className=\"h-4 w-4 inline mr-1\" />\n            {statusConfig.description}\n          </p>\n        </div>\n\n        {/* Cost Information */}\n        {job.estimatedCost && (\n          <div className=\"flex items-center justify-between text-sm\">\n            <span>Your Estimate:</span>\n            <span className=\"font-medium\">₦{job.estimatedCost.toLocaleString()}</span>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2\">\n          {job.status === 'notified' && (\n            <Button \n              onClick={handleReportCost}\n              className=\"flex-1\"\n              data-testid={`button-report-cost-${job.id}`}\n            >\n              <DollarSign className=\"h-4 w-4 mr-1\" />\n              Report Cost\n            </Button>\n          )}\n\n          {job.status === 'confirmed' && (\n            <Button \n              onClick={handleStartJob}\n              className=\"flex-1\"\n              data-testid={`button-start-${job.id}`}\n            >\n              <Play className=\"h-4 w-4 mr-1\" />\n              Start Job\n            </Button>\n          )}\n\n          {job.status === 'in_progress' && (\n            <Button \n              onClick={handleCompleteJob}\n              className=\"flex-1\"\n              data-testid={`button-complete-${job.id}`}\n            >\n              <CheckCircle className=\"h-4 w-4 mr-1\" />\n              Mark Complete\n            </Button>\n          )}\n\n          {(job.status === 'estimate_submitted' || job.status === 'completed') && (\n            <Button \n              variant=\"outline\" \n              className=\"flex-1\"\n              disabled\n              data-testid={`button-waiting-${job.id}`}\n            >\n              {job.status === 'estimate_submitted' ? 'Waiting for Admin' : 'Job Completed'}\n            </Button>\n          )}\n\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleContactClient}\n            data-testid={`button-contact-icon-${job.id}`}\n          >\n            <User className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7486},"client/src/components/Landing.tsx":{"content":"import Hero from \"./Hero\";\nimport FeaturedCategories from \"./FeaturedCategories\";\nimport TopServicemen from \"./TopServicemen\";\n\n// Landing page content (Navbar and Footer are handled by Layout)\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      <Hero />\n      <FeaturedCategories />\n      <TopServicemen />\n    </div>\n  );\n}","size_bytes":361},"client/src/components/LoginForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Link, useLocation } from \"wouter\";\nimport { Eye, EyeOff, Briefcase } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\nexport default function LoginForm() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [, setLocation] = useLocation();\n  const { login, loading } = useAuth();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      await login(formData.username, formData.password);\n      // Redirect to dashboard after successful login\n      setLocation('/dashboard');\n    } catch (error) {\n      // Error is handled in the AuthContext\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <Briefcase className=\"h-6 w-6 text-primary\" />\n            <span className=\"text-2xl font-bold\">ServiceMan</span>\n          </div>\n          <CardTitle>Welcome back</CardTitle>\n          <CardDescription>\n            Sign in to your account to continue\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent>\n          <Tabs defaultValue=\"client\" className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"client\" data-testid=\"tab-client\">Client</TabsTrigger>\n              <TabsTrigger value=\"serviceman\" data-testid=\"tab-serviceman\">Serviceman</TabsTrigger>\n              <TabsTrigger value=\"admin\" data-testid=\"tab-admin\">Admin</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"client\" className=\"space-y-4\">\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username or Email</Label>\n                  <Input\n                    id=\"username\"\n                    name=\"username\"\n                    type=\"text\"\n                    placeholder=\"Enter your username or email\"\n                    value={formData.username}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"input-username\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"password\"\n                      name=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"Enter your password\"\n                      value={formData.password}\n                      onChange={handleInputChange}\n                      required\n                      data-testid=\"input-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"absolute right-0 top-0 h-full px-3\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      data-testid=\"button-toggle-password\"\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"h-4 w-4\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loading}\n                  data-testid=\"button-login\"\n                >\n                  {loading ? \"Signing in...\" : \"Sign in\"}\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"serviceman\" className=\"space-y-4\">\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"serviceman-username\">Username or Email</Label>\n                  <Input\n                    id=\"serviceman-username\"\n                    name=\"username\"\n                    type=\"text\"\n                    placeholder=\"Enter your username or email\"\n                    value={formData.username}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"input-serviceman-username\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"serviceman-password\">Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"serviceman-password\"\n                      name=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"Enter your password\"\n                      value={formData.password}\n                      onChange={handleInputChange}\n                      required\n                      data-testid=\"input-serviceman-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"absolute right-0 top-0 h-full px-3\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"h-4 w-4\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loading}\n                  data-testid=\"button-serviceman-login\"\n                >\n                  {loading ? \"Signing in...\" : \"Sign in as Serviceman\"}\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"admin\" className=\"space-y-4\">\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"admin-username\">Admin Username</Label>\n                  <Input\n                    id=\"admin-username\"\n                    name=\"username\"\n                    type=\"text\"\n                    placeholder=\"Enter admin username\"\n                    value={formData.username}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"input-admin-username\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"admin-password\">Admin Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"admin-password\"\n                      name=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"Enter admin password\"\n                      value={formData.password}\n                      onChange={handleInputChange}\n                      required\n                      data-testid=\"input-admin-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"absolute right-0 top-0 h-full px-3\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"h-4 w-4\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loading}\n                  data-testid=\"button-admin-login\"\n                >\n                  {loading ? \"Signing in...\" : \"Sign in as Admin\"}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n\n          <div className=\"mt-6 space-y-4\">\n            <div className=\"text-center\">\n              <Link href=\"/forgot-password\" className=\"text-sm text-primary hover:underline\">\n                Forgot your password?\n              </Link>\n            </div>\n\n            <div className=\"text-center text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link href=\"/register\" className=\"text-primary hover:underline\" data-testid=\"link-register\">\n                Sign up\n              </Link>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9507},"client/src/components/Navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n} from \"@/components/ui/navigation-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { Bell, Search, Settings, User, LogOut, Briefcase } from \"lucide-react\";\nimport { ThemeToggle } from \"./ThemeToggle\";\n\ninterface NavbarProps {\n  user?: {\n    name: string;\n    role: 'client' | 'serviceman' | 'admin';\n    avatar?: string;\n  };\n  notifications?: number;\n  devMode?: boolean;\n}\n\nexport default function Navbar({ user, notifications = 0, devMode = false }: NavbarProps) {\n  const [location] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  //todo: remove mock functionality - categories will come from API\n  const categories = [\n    { id: 1, name: \"Carpentry\", count: 24 },\n    { id: 2, name: \"Electrical\", count: 18 },\n    { id: 3, name: \"Plumbing\", count: 31 },\n    { id: 4, name: \"Painting\", count: 15 },\n    { id: 5, name: \"Cleaning\", count: 42 },\n  ];\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Search triggered:', searchQuery);\n    // todo: implement actual search\n  };\n\n  const handleCategorySelect = (categoryId: number) => {\n    console.log('Category selected:', categoryId);\n    // todo: navigate to category page\n  };\n\n  return (\n    <nav className=\"sticky top-0 z-50 w-full border-b bg-background/80 backdrop-blur-sm\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex h-16 items-center justify-between\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-2 hover-elevate rounded-md px-2 py-1\">\n            <Briefcase className=\"h-6 w-6 text-primary\" />\n            <span className=\"text-xl font-bold\">ServiceMan</span>\n          </Link>\n\n          {/* Categories & Search */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Categories Dropdown */}\n            <NavigationMenu>\n              <NavigationMenuList>\n                <NavigationMenuItem>\n                  <NavigationMenuTrigger data-testid=\"button-categories\">\n                    Categories\n                  </NavigationMenuTrigger>\n                  <NavigationMenuContent>\n                    <div className=\"grid w-[400px] gap-1 p-2\">\n                      {categories.map((category) => (\n                        <button\n                          key={category.id}\n                          onClick={() => handleCategorySelect(category.id)}\n                          className=\"flex items-center justify-between rounded-md p-3 hover-elevate\"\n                          data-testid={`category-${category.name.toLowerCase()}`}\n                        >\n                          <span className=\"font-medium\">{category.name}</span>\n                          <Badge variant=\"secondary\">{category.count}</Badge>\n                        </button>\n                      ))}\n                    </div>\n                  </NavigationMenuContent>\n                </NavigationMenuItem>\n              </NavigationMenuList>\n            </NavigationMenu>\n\n            {/* Search */}\n            <form onSubmit={handleSearch} className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Search servicemen...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-64 pl-10\"\n                data-testid=\"input-search\"\n              />\n            </form>\n          </div>\n\n          {/* Right side */}\n          <div className=\"flex items-center space-x-2\">\n            {/* DEV Mode Toggle */}\n            {devMode && (\n              <Badge variant=\"destructive\" className=\"animate-emergency-pulse\">\n                DEV MODE\n              </Badge>\n            )}\n\n            {/* Theme Toggle */}\n            <ThemeToggle />\n\n            {user ? (\n              // Authenticated User Menu\n              <div className=\"flex items-center space-x-2\">\n                {/* Notifications */}\n                <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n                  <Bell className=\"h-4 w-4\" />\n                  {notifications > 0 && (\n                    <Badge \n                      variant=\"destructive\" \n                      className=\"absolute -right-1 -top-1 h-5 w-5 rounded-full p-0 text-xs\"\n                    >\n                      {notifications > 99 ? '99+' : notifications}\n                    </Badge>\n                  )}\n                </Button>\n\n                {/* User Menu */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-user-menu\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={user.avatar} alt={user.name} />\n                        <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>\n                      </Avatar>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent className=\"w-56\" align=\"end\">\n                    <div className=\"flex items-center justify-start gap-2 p-2\">\n                      <div className=\"flex flex-col space-y-1 leading-none\">\n                        <p className=\"font-medium\">{user.name}</p>\n                        <p className=\"w-[200px] truncate text-sm text-muted-foreground\">\n                          {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n                        </p>\n                      </div>\n                    </div>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild>\n                      <Link href={`/${user.role}/dashboard`} className=\"cursor-pointer\" data-testid=\"link-dashboard\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        Dashboard\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/settings\" className=\"cursor-pointer\" data-testid=\"link-settings\">\n                        <Settings className=\"mr-2 h-4 w-4\" />\n                        Settings\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem \n                      className=\"cursor-pointer text-destructive focus:text-destructive\"\n                      onClick={() => console.log('Logout triggered')}\n                      data-testid=\"button-logout\"\n                    >\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Log out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            ) : (\n              // Guest Actions\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"ghost\" asChild data-testid=\"button-login\">\n                  <Link href=\"/login\">Log in</Link>\n                </Button>\n                <Button asChild data-testid=\"button-hire-now\">\n                  <Link href=\"/hire\">Hire Now</Link>\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":7914},"client/src/components/PaymentModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { \n  CreditCard, \n  Smartphone, \n  Building, \n  CheckCircle, \n  AlertCircle,\n  Clock\n} from \"lucide-react\";\n\ninterface PaymentModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  paymentData: {\n    type: 'consultation' | 'final';\n    amount: number;\n    description: string;\n    requestId: number;\n    serviceman?: {\n      name: string;\n      category: string;\n    };\n  };\n  devMode?: boolean;\n  onPaymentComplete?: (success: boolean) => void;\n}\n\nexport default function PaymentModal({ \n  open, \n  onOpenChange, \n  paymentData, \n  devMode = false,\n  onPaymentComplete \n}: PaymentModalProps) {\n  const [selectedMethod, setSelectedMethod] = useState<'card' | 'transfer' | 'ussd'>('card');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [paymentStatus, setPaymentStatus] = useState<'pending' | 'success' | 'failed'>('pending');\n\n  const paymentMethods = [\n    {\n      id: 'card' as const,\n      name: 'Card Payment',\n      icon: CreditCard,\n      description: 'Visa, MasterCard, Verve'\n    },\n    {\n      id: 'transfer' as const,\n      name: 'Bank Transfer',\n      icon: Building,\n      description: 'Direct bank transfer'\n    },\n    {\n      id: 'ussd' as const,\n      name: 'USSD',\n      icon: Smartphone,\n      description: 'Pay with phone banking'\n    }\n  ];\n\n  const handlePayment = async () => {\n    setIsProcessing(true);\n    \n    console.log('Processing payment:', {\n      ...paymentData,\n      method: selectedMethod,\n      devMode\n    });\n\n    // Simulate payment processing\n    setTimeout(() => {\n      const success = Math.random() > 0.1; // 90% success rate for demo\n      setPaymentStatus(success ? 'success' : 'failed');\n      setIsProcessing(false);\n      \n      if (success && onPaymentComplete) {\n        setTimeout(() => {\n          onPaymentComplete(true);\n          onOpenChange(false);\n        }, 2000);\n      }\n    }, 3000);\n  };\n\n  const handleSimulatePayment = async (simulateResult: 'success' | 'failed') => {\n    setIsProcessing(true);\n    \n    console.log('DEV: Simulating payment result:', simulateResult);\n    // todo: call actual mock payment API in dev mode\n    \n    setTimeout(() => {\n      setPaymentStatus(simulateResult);\n      setIsProcessing(false);\n      \n      if (simulateResult === 'success' && onPaymentComplete) {\n        setTimeout(() => {\n          onPaymentComplete(true);\n          onOpenChange(false);\n        }, 2000);\n      }\n    }, 1500);\n  };\n\n  const renderPaymentStatus = () => {\n    if (paymentStatus === 'success') {\n      return (\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardContent className=\"p-6 text-center\">\n            <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Payment Successful!</h3>\n            <p className=\"text-green-600\">\n              Your {paymentData.type} payment has been processed successfully.\n            </p>\n            {paymentData.type === 'consultation' && (\n              <p className=\"text-sm text-green-600 mt-2\">\n                You'll receive updates as your request is processed.\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      );\n    }\n\n    if (paymentStatus === 'failed') {\n      return (\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardContent className=\"p-6 text-center\">\n            <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-red-800 mb-2\">Payment Failed</h3>\n            <p className=\"text-red-600 mb-4\">\n              We couldn't process your payment. Please try again.\n            </p>\n            <Button \n              onClick={() => setPaymentStatus('pending')}\n              variant=\"destructive\"\n              data-testid=\"button-retry-payment\"\n            >\n              Try Again\n            </Button>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    return null;\n  };\n\n  const statusContent = renderPaymentStatus();\n  if (statusContent) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"max-w-md\" data-testid=\"payment-status-modal\">\n          {statusContent}\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\" data-testid=\"payment-modal\">\n        <DialogHeader>\n          <DialogTitle>Complete Payment</DialogTitle>\n          <DialogDescription>\n            {paymentData.type === 'consultation' ? 'Pay consultation fee to proceed' : 'Pay final bill to confirm service'}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Payment Summary */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg\">Payment Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span>{paymentData.description}</span>\n                <span className=\"font-semibold\">₦{paymentData.amount.toLocaleString()}</span>\n              </div>\n              \n              {paymentData.serviceman && (\n                <div className=\"flex justify-between text-sm text-muted-foreground\">\n                  <span>Serviceman:</span>\n                  <span>{paymentData.serviceman.name}</span>\n                </div>\n              )}\n              \n              <div className=\"flex justify-between text-sm text-muted-foreground\">\n                <span>Request ID:</span>\n                <span>#{paymentData.requestId}</span>\n              </div>\n\n              <div className=\"border-t pt-3\">\n                <div className=\"flex justify-between font-semibold\">\n                  <span>Total Amount:</span>\n                  <span>₦{paymentData.amount.toLocaleString()}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* DEV Mode Controls */}\n          {devMode && (\n            <Card className=\"border-orange-200 bg-orange-50\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Badge variant=\"destructive\">DEV MODE</Badge>\n                  <span className=\"font-medium\">Simulate Payment</span>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"flex gap-2\">\n                  <Button\n                    size=\"sm\"\n                    onClick={() => handleSimulatePayment('success')}\n                    disabled={isProcessing}\n                    className=\"flex-1\"\n                    data-testid=\"button-simulate-success\"\n                  >\n                    Simulate Success\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={() => handleSimulatePayment('failed')}\n                    disabled={isProcessing}\n                    className=\"flex-1\"\n                    data-testid=\"button-simulate-failure\"\n                  >\n                    Simulate Failure\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Payment Methods */}\n          <div className=\"space-y-3\">\n            <h3 className=\"font-medium\">Select Payment Method</h3>\n            {paymentMethods.map((method) => {\n              const IconComponent = method.icon;\n              return (\n                <Card\n                  key={method.id}\n                  className={`cursor-pointer transition-colors ${\n                    selectedMethod === method.id \n                      ? 'border-primary bg-primary/5' \n                      : 'hover-elevate'\n                  }`}\n                  onClick={() => setSelectedMethod(method.id)}\n                  data-testid={`payment-method-${method.id}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <IconComponent className=\"h-5 w-5\" />\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">{method.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{method.description}</div>\n                      </div>\n                      {selectedMethod === method.id && (\n                        <CheckCircle className=\"h-5 w-5 text-primary\" />\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {/* Processing State */}\n          {isProcessing && (\n            <Card className=\"border-blue-200 bg-blue-50\">\n              <CardContent className=\"p-4 text-center\">\n                <Clock className=\"h-8 w-8 text-blue-500 mx-auto mb-2 animate-spin\" />\n                <p className=\"text-blue-600 font-medium\">Processing Payment...</p>\n                <p className=\"text-sm text-blue-500\">Please do not close this window</p>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Payment Button */}\n          {!devMode && (\n            <Button \n              onClick={handlePayment}\n              disabled={isProcessing}\n              className=\"w-full\"\n              data-testid=\"button-pay-now\"\n            >\n              {isProcessing ? 'Processing...' : `Pay ₦${paymentData.amount.toLocaleString()} Now`}\n            </Button>\n          )}\n\n          <div className=\"text-xs text-center text-muted-foreground\">\n            Secure payment powered by Paystack. Your payment information is encrypted and secure.\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10217},"client/src/components/RegisterForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link, useLocation } from \"wouter\";\nimport { Eye, EyeOff, Briefcase, X } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { api } from \"@/services/api\";\nimport { Category } from \"@/types\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function RegisterForm() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [selectedCategories, setSelectedCategories] = useState<number[]>([]);\n  const [, setLocation] = useLocation();\n  const { register, loading } = useAuth();\n  \n  const [clientData, setClientData] = useState({\n    full_name: \"\",\n    email: \"\",\n    phone_number: \"\",\n    contact_address: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n\n  const [servicemanData, setServicemanData] = useState({\n    full_name: \"\",\n    email: \"\",\n    phone_number: \"\",\n    contact_address: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    qualifications: \"\",\n    years_of_experience: \"\"\n  });\n\n  // Fetch categories from API\n  const { data: categories = [] } = useQuery({\n    queryKey: ['/categories'],\n    queryFn: () => api.getCategories(),\n  });\n\n  const handleClientChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setClientData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleServicemanChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setServicemanData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleCategoryToggle = (categoryId: number) => {\n    setSelectedCategories(prev => \n      prev.includes(categoryId)\n        ? prev.filter(id => id !== categoryId)\n        : [...prev, categoryId]\n    );\n  };\n\n  const handleClientSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (clientData.password !== clientData.confirmPassword) {\n      alert(\"Passwords don't match\");\n      return;\n    }\n\n    try {\n      const { confirmPassword, ...registerData } = clientData;\n      await register({\n        role: 'client',\n        ...registerData,\n      });\n      // Redirect to dashboard after successful registration\n      setLocation('/dashboard');\n    } catch (error) {\n      // Error is handled in the AuthContext\n    }\n  };\n\n  const handleServicemanSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (servicemanData.password !== servicemanData.confirmPassword) {\n      alert(\"Passwords don't match\");\n      return;\n    }\n\n    if (selectedCategories.length === 0) {\n      alert(\"Please select at least one service category\");\n      return;\n    }\n\n    try {\n      const { confirmPassword, ...registerData } = servicemanData;\n      await register({\n        role: 'serviceman',\n        ...registerData,\n        years_of_experience: Number(registerData.years_of_experience),\n        categories: selectedCategories,\n      });\n      // Redirect to a pending approval page or login\n      setLocation('/login');\n    } catch (error) {\n      // Error is handled in the AuthContext\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <Briefcase className=\"h-6 w-6 text-primary\" />\n            <span className=\"text-2xl font-bold\">ServiceMan</span>\n          </div>\n          <CardTitle>Create your account</CardTitle>\n          <CardDescription>\n            Join thousands of satisfied clients and professionals\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent>\n          <Tabs defaultValue=\"client\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"client\" data-testid=\"tab-client-register\">I need services</TabsTrigger>\n              <TabsTrigger value=\"serviceman\" data-testid=\"tab-serviceman-register\">I offer services</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"client\" className=\"space-y-4\">\n              <form onSubmit={handleClientSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"client-name\">Full Name</Label>\n                    <Input\n                      id=\"client-name\"\n                      name=\"full_name\"\n                      type=\"text\"\n                      placeholder=\"Enter your full name\"\n                      value={clientData.full_name}\n                      onChange={handleClientChange}\n                      required\n                      data-testid=\"input-client-name\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"client-email\">Email</Label>\n                    <Input\n                      id=\"client-email\"\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={clientData.email}\n                      onChange={handleClientChange}\n                      required\n                      data-testid=\"input-client-email\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"client-phone\">Phone Number</Label>\n                    <Input\n                      id=\"client-phone\"\n                      name=\"phone_number\"\n                      type=\"tel\"\n                      placeholder=\"+234 800 000 0000\"\n                      value={clientData.phone_number}\n                      onChange={handleClientChange}\n                      required\n                      data-testid=\"input-client-phone\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"client-address\">Address</Label>\n                    <Input\n                      id=\"client-address\"\n                      name=\"contact_address\"\n                      type=\"text\"\n                      placeholder=\"Your address\"\n                      value={clientData.contact_address}\n                      onChange={handleClientChange}\n                      required\n                      data-testid=\"input-client-address\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"client-password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"client-password\"\n                        name=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Create a password\"\n                        value={clientData.password}\n                        onChange={handleClientChange}\n                        required\n                        data-testid=\"input-client-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"absolute right-0 top-0 h-full px-3\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"client-confirm-password\">Confirm Password</Label>\n                    <Input\n                      id=\"client-confirm-password\"\n                      name=\"confirmPassword\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"Confirm your password\"\n                      value={clientData.confirmPassword}\n                      onChange={handleClientChange}\n                      required\n                      data-testid=\"input-client-confirm-password\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox id=\"terms\" required data-testid=\"checkbox-terms\" />\n                  <Label htmlFor=\"terms\" className=\"text-sm\">\n                    I agree to the{\" \"}\n                    <Link href=\"/terms\" className=\"text-primary hover:underline\">\n                      Terms of Service\n                    </Link>{\" \"}\n                    and{\" \"}\n                    <Link href=\"/privacy\" className=\"text-primary hover:underline\">\n                      Privacy Policy\n                    </Link>\n                  </Label>\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loading}\n                  data-testid=\"button-client-register\"\n                >\n                  {loading ? \"Creating account...\" : \"Create Client Account\"}\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"serviceman\" className=\"space-y-4\">\n              <form onSubmit={handleServicemanSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serviceman-name\">Full Name</Label>\n                    <Input\n                      id=\"serviceman-name\"\n                      name=\"full_name\"\n                      type=\"text\"\n                      placeholder=\"Enter your full name\"\n                      value={servicemanData.full_name}\n                      onChange={handleServicemanChange}\n                      required\n                      data-testid=\"input-serviceman-name\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serviceman-email\">Email</Label>\n                    <Input\n                      id=\"serviceman-email\"\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={servicemanData.email}\n                      onChange={handleServicemanChange}\n                      required\n                      data-testid=\"input-serviceman-email\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serviceman-phone\">Phone Number</Label>\n                    <Input\n                      id=\"serviceman-phone\"\n                      name=\"phone_number\"\n                      type=\"tel\"\n                      placeholder=\"+234 800 000 0000\"\n                      value={servicemanData.phone_number}\n                      onChange={handleServicemanChange}\n                      required\n                      data-testid=\"input-serviceman-phone\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serviceman-experience\">Years of Experience</Label>\n                    <Input\n                      id=\"serviceman-experience\"\n                      name=\"years_of_experience\"\n                      type=\"number\"\n                      placeholder=\"5\"\n                      min=\"0\"\n                      value={servicemanData.years_of_experience}\n                      onChange={handleServicemanChange}\n                      required\n                      data-testid=\"input-serviceman-experience\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"serviceman-address\">Address</Label>\n                  <Input\n                    id=\"serviceman-address\"\n                    name=\"contact_address\"\n                    type=\"text\"\n                    placeholder=\"Your address\"\n                    value={servicemanData.contact_address}\n                    onChange={handleServicemanChange}\n                    required\n                    data-testid=\"input-serviceman-address\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"serviceman-qualifications\">Qualifications & Certifications</Label>\n                  <Textarea\n                    id=\"serviceman-qualifications\"\n                    name=\"qualifications\"\n                    placeholder=\"Describe your qualifications, certifications, and expertise...\"\n                    value={servicemanData.qualifications}\n                    onChange={handleServicemanChange}\n                    required\n                    data-testid=\"input-serviceman-qualifications\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Service Categories (select all that apply)</Label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {categories.map((category) => (\n                      <Badge\n                        key={category.id}\n                        variant={selectedCategories.includes(category.id) ? \"default\" : \"outline\"}\n                        className=\"cursor-pointer hover-elevate\"\n                        onClick={() => handleCategoryToggle(category.id)}\n                        data-testid={`category-${category.name.toLowerCase()}`}\n                      >\n                        {category.name}\n                        {selectedCategories.includes(category.id) && (\n                          <X className=\"ml-1 h-3 w-3\" />\n                        )}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serviceman-password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"serviceman-password\"\n                        name=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Create a password\"\n                        value={servicemanData.password}\n                        onChange={handleServicemanChange}\n                        required\n                        data-testid=\"input-serviceman-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"absolute right-0 top-0 h-full px-3\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serviceman-confirm-password\">Confirm Password</Label>\n                    <Input\n                      id=\"serviceman-confirm-password\"\n                      name=\"confirmPassword\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"Confirm your password\"\n                      value={servicemanData.confirmPassword}\n                      onChange={handleServicemanChange}\n                      required\n                      data-testid=\"input-serviceman-confirm-password\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox id=\"serviceman-terms\" required data-testid=\"checkbox-serviceman-terms\" />\n                  <Label htmlFor=\"serviceman-terms\" className=\"text-sm\">\n                    I agree to the{\" \"}\n                    <Link href=\"/terms\" className=\"text-primary hover:underline\">\n                      Terms of Service\n                    </Link>{\" \"}\n                    and{\" \"}\n                    <Link href=\"/privacy\" className=\"text-primary hover:underline\">\n                      Privacy Policy\n                    </Link>\n                  </Label>\n                </div>\n\n                <div className=\"p-4 bg-muted rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    <strong>Note:</strong> Your application will be reviewed by our team. \n                    You'll receive an email notification once approved, and then you'll need to \n                    complete physical verification before you can start accepting jobs.\n                  </p>\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loading}\n                  data-testid=\"button-serviceman-register\"\n                >\n                  {loading ? \"Submitting application...\" : \"Submit Application\"}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n\n          <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"text-primary hover:underline\" data-testid=\"link-login\">\n              Sign in\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":18276},"client/src/components/RequestServiceModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Calendar, Clock, AlertTriangle, CreditCard } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport EmergencyBadge from \"./EmergencyBadge\";\n\ninterface RequestServiceModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  serviceman: {\n    id: number;\n    name: string;\n    category: string;\n    avatar?: string;\n    hourlyRate: number;\n  };\n  onSubmit?: (data: any) => void;\n}\n\nexport default function RequestServiceModal({ \n  open, \n  onOpenChange, \n  serviceman,\n  onSubmit \n}: RequestServiceModalProps) {\n  const [isEmergency, setIsEmergency] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Consultation fee calculation based on emergency status\n  const consultationFee = isEmergency ? 5000 : 2000;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const requestData = {\n      serviceman_id: serviceman.id,\n      requested_date: selectedDate,\n      is_emergency: isEmergency,\n      description: description,\n      consultation_fee: consultationFee\n    };\n\n    console.log('Service request submitted:', requestData);\n    \n    if (onSubmit) {\n      onSubmit(requestData);\n    }\n\n    // Simulate API call\n    setTimeout(() => {\n      setIsLoading(false);\n      onOpenChange(false);\n      // todo: handle actual API response and redirect to payment\n    }, 2000);\n  };\n\n  const getTomorrowDate = () => {\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    return tomorrow.toISOString().split('T')[0];\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\" data-testid=\"request-service-modal\">\n        <DialogHeader>\n          <DialogTitle>Request Service</DialogTitle>\n          <DialogDescription>\n            Schedule a consultation with {serviceman.name}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Serviceman Info */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarImage src={serviceman.avatar} alt={serviceman.name} />\n                  <AvatarFallback>{serviceman.name.charAt(0)}</AvatarFallback>\n                </Avatar>\n                <div>\n                  <h3 className=\"font-semibold\">{serviceman.name}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{serviceman.category}</p>\n                  <p className=\"text-sm font-medium\">₦{serviceman.hourlyRate.toLocaleString()}/hour</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {/* Emergency Toggle */}\n            <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n                  <Label htmlFor=\"emergency\" className=\"font-medium\">Emergency Service</Label>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Requires immediate attention (within 24 hours)\n                </p>\n              </div>\n              <Switch\n                id=\"emergency\"\n                checked={isEmergency}\n                onCheckedChange={setIsEmergency}\n                data-testid=\"switch-emergency\"\n              />\n            </div>\n\n            {isEmergency && (\n              <div className=\"flex justify-center\">\n                <EmergencyBadge />\n              </div>\n            )}\n\n            {/* Date Selection */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"requested-date\">Preferred Date</Label>\n              <div className=\"relative\">\n                <Calendar className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  id=\"requested-date\"\n                  type=\"date\"\n                  min={getTomorrowDate()}\n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  className=\"pl-10\"\n                  required\n                  data-testid=\"input-requested-date\"\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {isEmergency ? \"Emergency services aim for same-day response\" : \"Standard booking for next available slot\"}\n              </p>\n            </div>\n\n            {/* Description */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Service Description (Optional)</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Describe the work you need done...\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                rows={3}\n                data-testid=\"input-description\"\n              />\n            </div>\n\n            {/* Consultation Fee */}\n            <Card className=\"bg-muted/50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <CreditCard className=\"h-4 w-4\" />\n                    <span className=\"font-medium\">Consultation Fee</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-semibold\">₦{consultationFee.toLocaleString()}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {isEmergency ? \"Emergency rate\" : \"Standard rate\"}\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  This covers initial consultation and assessment. Actual service costs will be quoted separately.\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Submit Button */}\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"button-submit-request\"\n            >\n              {isLoading ? \"Processing...\" : `Pay ₦${consultationFee.toLocaleString()} & Request Service`}\n            </Button>\n          </form>\n\n          <div className=\"text-xs text-center text-muted-foreground\">\n            By submitting, you agree to our{\" \"}\n            <a href=\"/terms\" className=\"text-primary hover:underline\">Terms of Service</a>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7483},"client/src/components/ServicemanCard.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { MapPin, CheckCircle, Clock, ThumbsUp } from \"lucide-react\";\nimport StarRating from \"./StarRating\";\n\ninterface ServicemanCardProps {\n  serviceman: {\n    id: number;\n    name: string;\n    category: string;\n    location: string;\n    rating: number;\n    reviewCount: number;\n    completedJobs: number;\n    hourlyRate: number;\n    isVerified: boolean;\n    isOnline?: boolean;\n    avatar?: string;\n    specialties: string[];\n    responseTime?: string;\n  };\n  onHire?: (id: number) => void;\n  onViewProfile?: (id: number) => void;\n}\n\nexport default function ServicemanCard({ serviceman, onHire, onViewProfile }: ServicemanCardProps) {\n  const handleHireClick = () => {\n    if (onHire) {\n      onHire(serviceman.id);\n      console.log('Hire clicked for serviceman:', serviceman.id);\n    }\n  };\n\n  const handleProfileClick = () => {\n    if (onViewProfile) {\n      onViewProfile(serviceman.id);\n      console.log('View profile clicked for serviceman:', serviceman.id);\n    }\n  };\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`serviceman-card-${serviceman.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start space-x-3\">\n          <div className=\"relative\">\n            <Avatar className=\"h-12 w-12\">\n              <AvatarImage src={serviceman.avatar} alt={serviceman.name} />\n              <AvatarFallback>{serviceman.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n            </Avatar>\n            {serviceman.isOnline && (\n              <div className=\"absolute -bottom-1 -right-1 h-4 w-4 bg-green-500 border-2 border-white rounded-full\" />\n            )}\n          </div>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center space-x-2\">\n              <h3 className=\"font-semibold truncate\">{serviceman.name}</h3>\n              {serviceman.isVerified && (\n                <CheckCircle className=\"h-4 w-4 text-primary flex-shrink-0\" />\n              )}\n            </div>\n            <p className=\"text-sm text-muted-foreground\">{serviceman.category}</p>\n            <div className=\"flex items-center text-sm text-muted-foreground mt-1\">\n              <MapPin className=\"h-3 w-3 mr-1 flex-shrink-0\" />\n              <span className=\"truncate\">{serviceman.location}</span>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <StarRating rating={serviceman.rating} size=\"sm\" />\n          <Badge variant={serviceman.isOnline ? \"default\" : \"secondary\"}>\n            {serviceman.isOnline ? \"Online\" : \"Offline\"}\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div className=\"flex items-center space-x-1\">\n            <ThumbsUp className=\"h-3 w-3 text-muted-foreground\" />\n            <span>{serviceman.reviewCount} reviews</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Clock className=\"h-3 w-3 text-muted-foreground\" />\n            <span>{serviceman.completedJobs} jobs</span>\n          </div>\n        </div>\n\n        {serviceman.responseTime && (\n          <div className=\"text-sm text-muted-foreground\">\n            Typically responds in {serviceman.responseTime}\n          </div>\n        )}\n\n        <div className=\"flex flex-wrap gap-1\">\n          {serviceman.specialties.slice(0, 3).map((specialty, index) => (\n            <Badge key={index} variant=\"outline\" className=\"text-xs\">\n              {specialty}\n            </Badge>\n          ))}\n          {serviceman.specialties.length > 3 && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              +{serviceman.specialties.length - 3} more\n            </Badge>\n          )}\n        </div>\n\n        <div className=\"border-t pt-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <span className=\"text-lg font-semibold\">\n              ₦{serviceman.hourlyRate.toLocaleString()}/hour\n            </span>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button \n              size=\"sm\" \n              className=\"flex-1\"\n              onClick={handleHireClick}\n              data-testid={`button-hire-${serviceman.id}`}\n            >\n              Hire Now\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"outline\"\n              onClick={handleProfileClick}\n              data-testid={`button-profile-${serviceman.id}`}\n            >\n              Profile\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4888},"client/src/components/StarRating.tsx":{"content":"import { Star } from \"lucide-react\";\n\ninterface StarRatingProps {\n  rating: number;\n  maxRating?: number;\n  size?: \"sm\" | \"md\" | \"lg\";\n  interactive?: boolean;\n  onRatingChange?: (rating: number) => void;\n}\n\nexport default function StarRating({ \n  rating, \n  maxRating = 5, \n  size = \"md\", \n  interactive = false,\n  onRatingChange \n}: StarRatingProps) {\n  const sizeClasses = {\n    sm: \"h-3 w-3\",\n    md: \"h-4 w-4\", \n    lg: \"h-5 w-5\"\n  };\n\n  const handleStarClick = (starRating: number) => {\n    if (interactive && onRatingChange) {\n      onRatingChange(starRating);\n      console.log('Rating changed to:', starRating);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center space-x-1\" data-testid=\"star-rating\">\n      {Array.from({ length: maxRating }, (_, i) => {\n        const starRating = i + 1;\n        const isFilled = starRating <= rating;\n        const isPartial = starRating - 0.5 <= rating && starRating > rating;\n        \n        return (\n          <button\n            key={i}\n            className={`relative ${interactive ? 'hover:scale-110 transition-transform' : ''}`}\n            onClick={() => handleStarClick(starRating)}\n            disabled={!interactive}\n            data-testid={`star-${starRating}`}\n          >\n            <Star \n              className={`${sizeClasses[size]} ${\n                isFilled \n                  ? 'fill-yellow-400 text-yellow-400' \n                  : isPartial\n                    ? 'fill-yellow-400/50 text-yellow-400'\n                    : 'fill-none text-gray-300'\n              }`}\n            />\n          </button>\n        );\n      })}\n      <span className=\"ml-2 text-sm text-muted-foreground\">\n        {rating.toFixed(1)}\n      </span>\n    </div>\n  );\n}","size_bytes":1722},"client/src/components/ThemeToggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n    const initialTheme = savedTheme || systemTheme;\n    \n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-4 w-4\" />\n      ) : (\n        <Sun className=\"h-4 w-4\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":1186},"client/src/components/TopServicemen.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { MapPin, CheckCircle } from \"lucide-react\";\nimport StarRating from \"./StarRating\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/services/api\";\nimport { Serviceman } from \"@/types\";\n\nexport default function TopServicemen() {\n  const [, setLocation] = useLocation();\n  \n  // Fetch top servicemen from API or use mock data in DEV mode\n  const { data: apiServicemen, isLoading } = useQuery({\n    queryKey: ['/servicemen/top'],\n    queryFn: () => api.getServicemen({ limit: 4, ordering: '-average_rating' }),\n  });\n\n  // Mock data for DEV mode\n  const mockServicemen: Serviceman[] = [\n    {\n      id: 1,\n      email: \"james.wilson@example.com\",\n      full_name: \"James Wilson\",\n      phone_number: \"+2348012345678\",\n      contact_address: \"Lagos, Nigeria\",\n      role: \"serviceman\",\n      is_active: true,\n      is_verified: true,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      qualifications: \"Certified Electrician\",\n      years_of_experience: 8,\n      categories: [2],\n      average_rating: 4.9,\n      completed_jobs_count: 145,\n      is_available: true,\n      avatar: \"/api/placeholder/64/64\",\n    },\n    {\n      id: 2,\n      email: \"sarah.johnson@example.com\",\n      full_name: \"Sarah Johnson\",\n      phone_number: \"+2348087654321\",\n      contact_address: \"Abuja, Nigeria\",\n      role: \"serviceman\",\n      is_active: true,\n      is_verified: true,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      qualifications: \"Master Plumber\",\n      years_of_experience: 6,\n      categories: [3],\n      average_rating: 4.8,\n      completed_jobs_count: 112,\n      is_available: true,\n      avatar: \"/api/placeholder/64/64\",\n    },\n    {\n      id: 3,\n      email: \"michael.chen@example.com\",\n      full_name: \"Michael Chen\",\n      phone_number: \"+2348098765432\",\n      contact_address: \"Port Harcourt, Nigeria\",\n      role: \"serviceman\",\n      is_active: true,\n      is_verified: true,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      qualifications: \"Master Carpenter\",\n      years_of_experience: 10,\n      categories: [1],\n      average_rating: 4.9,\n      completed_jobs_count: 178,\n      is_available: true,\n      avatar: \"/api/placeholder/64/64\",\n    },\n    {\n      id: 4,\n      email: \"fatima.ahmed@example.com\",\n      full_name: \"Fatima Ahmed\",\n      phone_number: \"+2348076543210\",\n      contact_address: \"Kano, Nigeria\",\n      role: \"serviceman\",\n      is_active: true,\n      is_verified: true,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      qualifications: \"Professional Cleaner\",\n      years_of_experience: 5,\n      categories: [5],\n      average_rating: 4.7,\n      completed_jobs_count: 234,\n      is_available: true,\n      avatar: \"/api/placeholder/64/64\",\n    }\n  ];\n\n  const servicemen = import.meta.env.VITE_DEV_MODE === \"true\" \n    ? mockServicemen \n    : (apiServicemen?.results || []);\n\n  const handleHireClick = (servicemanId: number) => {\n    setLocation(`/servicemen/${servicemanId}/hire`);\n  };\n\n  const handleViewProfile = (servicemanId: number) => {\n    setLocation(`/servicemen/${servicemanId}/profile`);\n  };\n\n  return (\n    <section className=\"py-16 bg-muted/30\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold mb-4\">Top-Rated Servicemen</h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Meet our highest-rated professionals who consistently deliver exceptional service\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {isLoading ? (\n            // Loading skeletons\n            Array.from({ length: 4 }).map((_, index) => (\n              <Card key={index}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Skeleton className=\"h-12 w-12 rounded-full\" />\n                    <div className=\"flex-1 space-y-2\">\n                      <Skeleton className=\"h-4 w-24\" />\n                      <Skeleton className=\"h-3 w-16\" />\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Skeleton className=\"h-4 w-32\" />\n                  <Skeleton className=\"h-4 w-24\" />\n                  <Skeleton className=\"h-4 w-28\" />\n                  <div className=\"flex gap-1\">\n                    <Skeleton className=\"h-5 w-16\" />\n                    <Skeleton className=\"h-5 w-12\" />\n                  </div>\n                  <Skeleton className=\"h-5 w-20\" />\n                  <div className=\"flex gap-2\">\n                    <Skeleton className=\"h-8 flex-1\" />\n                    <Skeleton className=\"h-8 w-16\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            servicemen.slice(0, 4).map((serviceman) => (\n              <Card \n                key={serviceman.id} \n                className=\"hover-elevate\"\n                data-testid={`serviceman-card-${serviceman.id}`}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"h-12 w-12\">\n                      <AvatarImage src={serviceman.avatar} alt={serviceman.full_name} />\n                      <AvatarFallback>{serviceman.full_name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-1\">\n                        <h3 className=\"font-semibold text-sm\">{serviceman.full_name}</h3>\n                        {serviceman.is_verified && (\n                          <CheckCircle className=\"h-4 w-4 text-primary\" />\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">{serviceman.qualifications}</p>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center text-sm text-muted-foreground\">\n                    <MapPin className=\"h-3 w-3 mr-1\" />\n                    {serviceman.contact_address}\n                  </div>\n\n                  <StarRating rating={serviceman.average_rating} size=\"sm\" />\n                  \n                  <div className=\"text-sm text-muted-foreground\">\n                    {serviceman.completed_jobs_count} jobs completed • {serviceman.years_of_experience} years exp.\n                  </div>\n\n                  <div className=\"flex flex-wrap gap-1\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {serviceman.years_of_experience}+ years\n                    </Badge>\n                    {serviceman.is_available && (\n                      <Badge variant=\"outline\" className=\"text-xs text-green-600\">\n                        Available\n                      </Badge>\n                    )}\n                  </div>\n\n                  <div className=\"text-lg font-semibold\">\n                    Top Rated Professional\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      size=\"sm\" \n                      className=\"flex-1\"\n                      onClick={() => handleHireClick(serviceman.id)}\n                      data-testid={`button-hire-${serviceman.id}`}\n                    >\n                      Hire Now\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => handleViewProfile(serviceman.id)}\n                      data-testid={`button-profile-${serviceman.id}`}\n                    >\n                      Profile\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n\n        <div className=\"text-center mt-8\">\n          <Button variant=\"outline\" size=\"lg\" asChild data-testid=\"button-browse-all\">\n            <Link href=\"/browse\">Browse All Servicemen</Link>\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":8804},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { User, RegisterData } from \"@/types\";\nimport { api } from \"@/services/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (data: RegisterData) => Promise<User>;\n  logout: () => void;\n  loading: boolean;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  // Mock user for development\n  const mockUser: User = {\n    id: 1,\n    full_name: \"John Doe\",\n    email: \"john@example.com\",\n    phone_number: \"+2348012345678\",\n    contact_address: \"123 Main St, Lagos\",\n    role: \"client\",\n    avatar: \"/api/placeholder/32/32\",\n    is_active: true,\n    is_verified: true,\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n  };\n\n  useEffect(() => {\n    // Initialize auth state\n    // In dev mode, use mock user\n    const initAuth = async () => {\n      try {\n        // For now, use mock user in development\n        if (import.meta.env.VITE_DEV_MODE === \"true\") {\n          setUser(mockUser);\n        } else {\n          // In production, check for existing auth\n          await refreshUser();\n        }\n      } catch (error) {\n        console.error(\"Auth initialization error:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      \n      // In DEV mode, simulate login with mock user\n      if (import.meta.env.VITE_DEV_MODE === \"true\") {\n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        setUser(mockUser);\n        toast({\n          title: \"Login successful\",\n          description: \"Welcome back!\",\n        });\n        return;\n      }\n\n      // Real API login\n      const response = await api.login({ username: email, password });\n      \n      // Store token if using JWT\n      if (response.access) {\n        localStorage.setItem(\"access_token\", response.access);\n        localStorage.setItem(\"refresh_token\", response.refresh);\n      }\n      \n      setUser(response.user);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome back!\",\n      });\n    } catch (error: any) {\n      console.error(\"Login error:\", error);\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (data: RegisterData): Promise<User> => {\n    try {\n      setLoading(true);\n      \n      // In DEV mode, simulate registration\n      if (import.meta.env.VITE_DEV_MODE === \"true\") {\n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        \n        const newUser: User = {\n          id: Date.now(),\n          ...data,\n          is_active: data.role === 'client' ? true : false, // Servicemen need approval\n          is_verified: data.role === 'client' ? true : false,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        };\n        \n        if (data.role === 'client') {\n          setUser(newUser);\n          toast({\n            title: \"Registration successful\",\n            description: \"Welcome to ServiceMan!\",\n          });\n        } else {\n          toast({\n            title: \"Application submitted\",\n            description: \"Your serviceman application has been submitted for review. You'll receive an email notification once approved.\",\n          });\n        }\n        \n        return newUser;\n      }\n\n      // Real API registration\n      const response = await api.register(data);\n      \n      if (data.role === 'client') {\n        setUser(response);\n        toast({\n          title: \"Registration successful\",\n          description: \"Welcome to ServiceMan!\",\n        });\n      } else {\n        toast({\n          title: \"Application submitted\",\n          description: \"Your serviceman application has been submitted for review.\",\n        });\n      }\n      \n      return response;\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"An error occurred during registration\",\n        variant: \"destructive\",\n      });\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    // Clear any stored tokens\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out.\",\n    });\n  };\n\n  const refreshUser = async () => {\n    try {\n      // This would typically refresh the user profile from the API\n      // For now, we'll use mock data in dev mode\n      if (import.meta.env.VITE_DEV_MODE === \"true\") {\n        setUser(mockUser);\n      }\n    } catch (error) {\n      console.error(\"User refresh error:\", error);\n      setUser(null);\n    }\n  };\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading,\n    refreshUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}","size_bytes":5867},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/apiRequest.ts":{"content":"// src/lib/apiRequest.ts\nconst BASE = import.meta.env.VITE_API_URL?.replace(/\\/$/, \"\") ?? \"http://127.0.0.1:8000/api/v1\";\n\nasync function throwIfNotOk(res: Response) {\n  if (!res.ok) {\n    const text = await res.text().catch(() => res.statusText);\n    throw new Error(`${res.status}: ${text || res.statusText}`);\n  }\n}\n\nexport async function apiRequest(method: string, endpoint: string, data?: any, opts: RequestInit = {}): Promise<Response> {\n  const url = `${BASE}${endpoint.startsWith(\"/\") ? endpoint : `/${endpoint}`}`;\n  const headers: HeadersInit = { ...(data ? { \"Content-Type\": \"application/json\" } : {}) };\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n    ...opts,\n  });\n  await throwIfNotOk(res);\n  return res;\n}","size_bytes":814},"client/src/lib/constants.ts":{"content":"// Configuration constants\nexport const CONFIG = {\n  API_URL: import.meta.env.VITE_API_URL || \"http://127.0.0.1:8000/api/v1\",\n  DEV_MODE: import.meta.env.VITE_DEV_MODE === \"true\" || true, // Default to true for development\n  APP_NAME: \"ServiceMan\",\n  EMERGENCY_FEE: 5000,\n  STANDARD_FEE: 2000,\n} as const;\n\nexport const ROUTES = {\n  HOME: \"/\",\n  LOGIN: \"/login\",\n  REGISTER: \"/register\",\n  BROWSE: \"/browse\",\n  HIRE: \"/hire\",\n  CLIENT_DASHBOARD: \"/client/dashboard\",\n  SERVICEMAN_DASHBOARD: \"/serviceman/dashboard\", \n  ADMIN_DASHBOARD: \"/admin/dashboard\",\n  CATEGORIES: \"/categories\",\n  HOW_IT_WORKS: \"/how-it-works\",\n  PRICING: \"/pricing\",\n  SAFETY: \"/safety\",\n  HELP: \"/help\",\n  CONTACT: \"/contact\",\n  TERMS: \"/terms\",\n  PRIVACY: \"/privacy\",\n} as const;","size_bytes":755},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/services/api.ts":{"content":"// src/services/api.ts\nimport { apiRequest } from '@/lib/apiRequest';\nimport type { \n  User, \n  Category, \n  Serviceman, \n  ServiceRequest, \n  Rating, \n  Notification, \n  Application, \n  Analytics,\n  LoginData,\n  RegisterData,\n  CreateRequestData,\n  ReportCostData,\n  SetCostData,\n  RatingData,\n  PaymentResponse,\n  LandingData\n} from '@/types';\n\nexport const api = {\n  // Auth\n  register: (data: RegisterData): Promise<User> => apiRequest('POST', '/auth/register/', data).then(r => r.json()),\n  login: (data: LoginData): Promise<{ access: string; refresh: string; user: User }> => apiRequest('POST', '/auth/login/', data).then(r => r.json()),\n  refresh: (): Promise<{ access: string }> => apiRequest('POST', '/auth/refresh/').then(r => r.json()),\n\n  // Categories\n  getCategories: (): Promise<Category[]> => apiRequest('GET', '/categories/').then(r => r.json()),\n\n  // Landing\n  getLanding: (): Promise<LandingData> => apiRequest('GET', '/landing/').then(r => r.json()),\n\n  // Browse / Servicemen\n  getServicemen: (params: Record<string, any> = {}): Promise<{ results: Serviceman[]; count: number }> => {\n    const qs = new URLSearchParams(params).toString();\n    return apiRequest('GET', `/servicemen/${qs ? `?${qs}` : ''}`).then(r => r.json());\n  },\n  getServicemanProfile: (id: string | number): Promise<Serviceman> => apiRequest('GET', `/servicemen/${id}/profile/`).then(r => r.json()),\n\n  // Client requests & payments\n  createRequest: (data: CreateRequestData): Promise<PaymentResponse> => apiRequest('POST', '/clients/request/', data).then(r => r.json()),\n  mockConsultationPay: (id: string | number, body: { simulate: string }): Promise<ServiceRequest> => apiRequest('POST', `/mock-pay/consultation/${id}/`, body).then(r => r.json()),\n  mockFinalPay: (id: string | number, body: { simulate: string }): Promise<ServiceRequest> => apiRequest('POST', `/mock-pay/final/${id}/`, body).then(r => r.json()),\n  getClientRequests: (): Promise<ServiceRequest[]> => apiRequest('GET', '/clients/requests/').then(r => r.json()),\n  rateRequest: (id: string | number, body: RatingData): Promise<Rating> => apiRequest('POST', `/clients/requests/${id}/rate/`, body).then(r => r.json()),\n\n  // Serviceman\n  getServicemanJobs: (): Promise<ServiceRequest[]> => apiRequest('GET', '/servicemen/jobs/').then(r => r.json()),\n  reportCost: (id: string | number, body: ReportCostData): Promise<ServiceRequest> => apiRequest('POST', `/servicemen/requests/${id}/report-cost/`, body).then(r => r.json()),\n  startJob: (id: string | number): Promise<ServiceRequest> => apiRequest('POST', `/servicemen/requests/${id}/start/`).then(r => r.json()),\n  completeJob: (id: string | number): Promise<ServiceRequest> => apiRequest('POST', `/servicemen/requests/${id}/complete/`).then(r => r.json()),\n  getServicemanRatings: (): Promise<Rating[]> => apiRequest('GET', '/servicemen/ratings/').then(r => r.json()),\n\n  // Admin\n  getApplications: (): Promise<Application[]> => apiRequest('GET', '/admin/applications/').then(r => r.json()),\n  approveApplication: (id: string | number): Promise<Application> => apiRequest('POST', `/admin/applications/${id}/approve/`).then(r => r.json()),\n  rejectApplication: (id: string | number): Promise<Application> => apiRequest('POST', `/admin/applications/${id}/reject/`).then(r => r.json()),\n  getAllRequests: (): Promise<ServiceRequest[]> => apiRequest('GET', '/admin/requests/').then(r => r.json()),\n  notifyServiceman: (id: string | number): Promise<ServiceRequest> => apiRequest('POST', `/admin/requests/${id}/notify-serviceman/`).then(r => r.json()),\n  setServiceCost: (id: string | number, body: SetCostData): Promise<{ final_bill: number; payment_url: string }> => apiRequest('POST', `/admin/requests/${id}/set-cost/`, body).then(r => r.json()),\n  getAnalytics: (): Promise<Analytics> => apiRequest('GET', '/admin/analytics/').then(r => r.json()),\n\n  // Notifications\n  getNotifications: (): Promise<Notification[]> => apiRequest('GET', '/notifications/').then(r => r.json()),\n  markNotificationRead: (id: string | number): Promise<Notification> => apiRequest('POST', `/notifications/${id}/read/`).then(r => r.json()),\n};","size_bytes":4133},"client/src/types/index.ts":{"content":"// TypeScript interfaces for ServiceMan application\n\nexport interface User {\n  id: number;\n  email: string;\n  full_name: string;\n  phone_number: string;\n  contact_address: string;\n  role: 'client' | 'serviceman' | 'admin';\n  is_active: boolean;\n  is_verified?: boolean;\n  created_at: string;\n  updated_at: string;\n  avatar?: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  description: string;\n  icon?: string;\n  image?: string;\n  created_at: string;\n}\n\nexport interface Serviceman extends User {\n  qualifications: string;\n  years_of_experience: number;\n  categories: number[];\n  average_rating: number;\n  completed_jobs_count: number;\n  is_available: boolean;\n  profile_image?: string;\n}\n\nexport interface ServiceRequest {\n  id: number;\n  client_id: number;\n  serviceman_id: number;\n  category_id: number;\n  requested_date: string;\n  is_emergency: boolean;\n  consultation_fee: number;\n  consultation_paid: boolean;\n  serviceman_estimate?: number;\n  base_cost?: number;\n  markup_percent?: number;\n  final_bill?: number;\n  final_payment_paid: boolean;\n  status: 'created' | 'awaiting_admin' | 'notified_serviceman' | 'serviceman_reported' | 'awaiting_client_payment' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled';\n  created_at: string;\n  updated_at: string;\n  client?: User;\n  serviceman?: Serviceman;\n  category?: Category;\n  rating?: Rating;\n}\n\nexport interface Rating {\n  id: number;\n  request_id: number;\n  client_id: number;\n  serviceman_id: number;\n  stars: number;\n  feedback: string;\n  created_at: string;\n}\n\nexport interface Notification {\n  id: number;\n  user_id: number;\n  title: string;\n  message: string;\n  is_read: boolean;\n  notification_type: 'info' | 'success' | 'warning' | 'error';\n  created_at: string;\n}\n\nexport interface Application {\n  id: number;\n  user_id: number;\n  status: 'pending' | 'approved' | 'rejected';\n  qualifications: string;\n  years_of_experience: number;\n  categories: number[];\n  submitted_at: string;\n  reviewed_at?: string;\n  user?: User;\n}\n\nexport interface Analytics {\n  total_requests: number;\n  completed_requests: number;\n  total_revenue: number;\n  average_ratings_by_category: Array<{\n    category: string;\n    average_rating: number;\n    total_jobs: number;\n  }>;\n  monthly_stats: Array<{\n    month: string;\n    requests: number;\n    revenue: number;\n  }>;\n}\n\n// Request/Response Types\nexport interface LoginData {\n  username: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  role: 'client' | 'serviceman';\n  full_name: string;\n  email: string;\n  phone_number: string;\n  contact_address: string;\n  password: string;\n  qualifications?: string;\n  years_of_experience?: number;\n  categories?: number[];\n}\n\nexport interface CreateRequestData {\n  serviceman_id: number;\n  category_id: number;\n  requested_date: string;\n  is_emergency: boolean;\n}\n\nexport interface ReportCostData {\n  serviceman_estimate: number;\n}\n\nexport interface SetCostData {\n  base_cost: number;\n  markup_percent: number;\n}\n\nexport interface RatingData {\n  stars: number;\n  feedback: string;\n}\n\nexport interface PaymentResponse {\n  request_id: number;\n  consultation_fee?: number;\n  final_bill?: number;\n  payment_required: boolean;\n  payment_url?: string;\n}\n\nexport interface LandingData {\n  featured_categories: Category[];\n  top_servicemen: Serviceman[];\n  hero: {\n    title: string;\n    subtitle: string;\n    cta_text: string;\n  };\n}","size_bytes":3402},"client/src/components/layout/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { Facebook, Twitter, Instagram, LinkedinIcon, Mail, Phone, MapPin } from \"lucide-react\";\nimport { CONFIG, ROUTES } from \"@/lib/constants\";\n\nconst footerLinks = {\n  \"Quick Links\": [\n    { label: \"Browse Services\", href: ROUTES.BROWSE },\n    { label: \"How it Works\", href: ROUTES.HOW_IT_WORKS },\n    { label: \"Pricing\", href: ROUTES.PRICING },\n    { label: \"Safety & Trust\", href: ROUTES.SAFETY },\n  ],\n  \"Support\": [\n    { label: \"Help Center\", href: ROUTES.HELP },\n    { label: \"Contact Us\", href: ROUTES.CONTACT },\n    { label: \"Terms of Service\", href: ROUTES.TERMS },\n    { label: \"Privacy Policy\", href: ROUTES.PRIVACY },\n  ],\n  \"For Professionals\": [\n    { label: \"Join as Serviceman\", href: `${ROUTES.REGISTER}?type=serviceman` },\n    { label: \"Serviceman Dashboard\", href: ROUTES.SERVICEMAN_DASHBOARD },\n    { label: \"Requirements\", href: \"/requirements\" },\n    { label: \"Success Stories\", href: \"/stories\" },\n  ],\n};\n\nconst socialLinks = [\n  { icon: Facebook, href: \"#\", label: \"Facebook\" },\n  { icon: Twitter, href: \"#\", label: \"Twitter\" },\n  { icon: Instagram, href: \"#\", label: \"Instagram\" },\n  { icon: LinkedinIcon, href: \"#\", label: \"LinkedIn\" },\n];\n\nconst contactInfo = [\n  { icon: Phone, text: \"+234 (0) 123 456 7890\" },\n  { icon: Mail, text: \"support@serviceman.ng\" },\n  { icon: MapPin, text: \"Lagos, Nigeria\" },\n];\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-gray-900 dark:bg-gray-950 text-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Main Footer Content */}\n        <div className=\"py-12 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Brand Section */}\n          <div className=\"lg:col-span-1\">\n            <motion.div \n              className=\"flex items-center space-x-2 mb-4\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-lg\">S</span>\n              </div>\n              <span className=\"text-xl font-bold\">{CONFIG.APP_NAME}</span>\n            </motion.div>\n            <p className=\"text-gray-400 mb-6 text-sm leading-relaxed\">\n              Connect with trusted professionals for all your service needs. \n              From emergency repairs to regular maintenance, we've got you covered.\n            </p>\n            \n            {/* Contact Info */}\n            <div className=\"space-y-3\">\n              {contactInfo.map((item, index) => (\n                <div key={index} className=\"flex items-center space-x-3 text-sm text-gray-400\">\n                  <item.icon className=\"w-4 h-4 text-blue-400\" />\n                  <span>{item.text}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Link Sections */}\n          {Object.entries(footerLinks).map(([title, links]) => (\n            <div key={title}>\n              <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n              <ul className=\"space-y-2\">\n                {links.map((link) => (\n                  <li key={link.href}>\n                    <Link href={link.href}>\n                      <motion.span\n                        className=\"text-gray-400 hover:text-blue-400 transition-colors text-sm\"\n                        whileHover={{ x: 5 }}\n                      >\n                        {link.label}\n                      </motion.span>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        {/* Social Links & Newsletter */}\n        <div className=\"border-t border-gray-800 py-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n            {/* Social Links */}\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-400\">Follow us:</span>\n              {socialLinks.map((social) => (\n                <motion.a\n                  key={social.label}\n                  href={social.href}\n                  className=\"w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center text-gray-400 hover:text-blue-400 hover:bg-gray-700 transition-colors\"\n                  whileHover={{ scale: 1.1 }}\n                  whileTap={{ scale: 0.9 }}\n                  aria-label={social.label}\n                >\n                  <social.icon className=\"w-4 h-4\" />\n                </motion.a>\n              ))}\n            </div>\n\n            {/* Newsletter Signup */}\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-400\">Stay updated:</span>\n              <div className=\"flex space-x-2\">\n                <input\n                  type=\"email\"\n                  placeholder=\"Your email\"\n                  className=\"px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-sm text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n                <motion.button\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 transition-colors\"\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  Subscribe\n                </motion.button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"border-t border-gray-800 py-4\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center space-y-2 md:space-y-0\">\n            <p className=\"text-sm text-gray-400\">\n              © {new Date().getFullYear()} {CONFIG.APP_NAME}. All rights reserved.\n            </p>\n            <div className=\"flex space-x-6 text-sm text-gray-400\">\n              <Link href={ROUTES.TERMS}>\n                <span className=\"hover:text-blue-400 transition-colors\">Terms</span>\n              </Link>\n              <Link href={ROUTES.PRIVACY}>\n                <span className=\"hover:text-blue-400 transition-colors\">Privacy</span>\n              </Link>\n              <span>Made with ❤️ in Nigeria</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":6369},"client/src/components/layout/Layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { motion } from \"framer-motion\";\nimport Navbar from \"./Navbar\";\nimport Footer from \"./Footer\";\nimport { User, Category } from \"@/types\";\n\ninterface LayoutProps {\n  children: ReactNode;\n  user?: User | null;\n  categories?: Category[];\n  notifications?: number;\n  onSearch?: (query: string) => void;\n  hideFooter?: boolean;\n}\n\nexport default function Layout({ \n  children, \n  user, \n  categories = [], \n  notifications = 0, \n  onSearch,\n  hideFooter = false \n}: LayoutProps) {\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-50 dark:bg-gray-900\">\n      <Navbar \n        user={user} \n        categories={categories} \n        notifications={notifications} \n        onSearch={onSearch}\n      />\n      \n      <main className=\"flex-1 pt-16\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          {children}\n        </motion.div>\n      </main>\n      \n      {!hideFooter && <Footer />}\n    </div>\n  );\n}","size_bytes":1064},"client/src/components/layout/Navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { Bell, Menu, X, User, Settings, LogOut, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuLabel, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { CONFIG, ROUTES } from \"@/lib/constants\";\nimport { User as UserType, Category } from \"@/types\";\n\ninterface NavbarProps {\n  user?: UserType | null;\n  categories?: Category[];\n  notifications?: number;\n  onSearch?: (query: string) => void;\n}\n\nexport default function Navbar({ user, categories = [], notifications = 0, onSearch }: NavbarProps) {\n  const [location] = useLocation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch?.(searchQuery);\n  };\n\n  const navItems = [\n    { label: \"Browse\", href: ROUTES.BROWSE },\n    { label: \"Categories\", href: ROUTES.CATEGORIES },\n    { label: \"How it Works\", href: ROUTES.HOW_IT_WORKS },\n    { label: \"Pricing\", href: ROUTES.PRICING },\n  ];\n\n  const userMenuItems = user ? [\n    {\n      label: \"Dashboard\",\n      href: user.role === \"client\" \n        ? ROUTES.CLIENT_DASHBOARD\n        : user.role === \"serviceman\"\n        ? ROUTES.SERVICEMAN_DASHBOARD\n        : ROUTES.ADMIN_DASHBOARD,\n      icon: User,\n    },\n    { label: \"Settings\", href: \"/settings\", icon: Settings },\n  ] : [];\n\n  return (\n    <motion.nav \n      className=\"fixed top-0 left-0 right-0 z-50 bg-white/80 backdrop-blur-md border-b border-gray-200 dark:bg-gray-900/80 dark:border-gray-800\"\n      initial={{ y: -100 }}\n      animate={{ y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href={ROUTES.HOME}>\n            <motion.div \n              className=\"flex items-center space-x-2\"\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-lg\">S</span>\n              </div>\n              <span className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                {CONFIG.APP_NAME}\n              </span>\n            </motion.div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <Link key={item.href} href={item.href}>\n                <motion.span\n                  className={`text-sm font-medium transition-colors hover:text-blue-600 dark:hover:text-blue-400 ${\n                    location === item.href \n                      ? \"text-blue-600 dark:text-blue-400\" \n                      : \"text-gray-700 dark:text-gray-300\"\n                  }`}\n                  whileHover={{ y: -2 }}\n                >\n                  {item.label}\n                </motion.span>\n              </Link>\n            ))}\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"hidden md:flex flex-1 max-w-lg mx-8\">\n            <form onSubmit={handleSearch} className=\"w-full\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search servicemen...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 pr-4 w-full bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700\"\n                />\n              </div>\n            </form>\n          </div>\n\n          {/* Right Side */}\n          <div className=\"flex items-center space-x-4\">\n            {/* DEV Mode Badge */}\n            {CONFIG.DEV_MODE && (\n              <Badge variant=\"outline\" className=\"hidden sm:block\">\n                DEV MODE\n              </Badge>\n            )}\n\n            {/* Hire Now Button */}\n            <Link href={ROUTES.HIRE}>\n              <Button className=\"hidden sm:block bg-blue-600 hover:bg-blue-700\">\n                Hire Now\n              </Button>\n            </Link>\n\n            {user ? (\n              <>\n                {/* Notifications */}\n                <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                  <Bell className=\"w-5 h-5\" />\n                  {notifications > 0 && (\n                    <Badge \n                      variant=\"destructive\" \n                      className=\"absolute -top-1 -right-1 w-5 h-5 flex items-center justify-center text-xs p-0\"\n                    >\n                      {notifications > 9 ? \"9+\" : notifications}\n                    </Badge>\n                  )}\n                </Button>\n\n                {/* User Menu */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center space-x-2\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarImage src={user.avatar} alt={user.full_name} />\n                        <AvatarFallback>\n                          {user.full_name.split(\" \").map(n => n[0]).join(\"\")}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"hidden sm:block text-sm font-medium\">\n                        {user.full_name.split(\" \")[0]}\n                      </span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <DropdownMenuLabel>\n                      <div className=\"flex flex-col space-y-1\">\n                        <p className=\"text-sm font-medium\">{user.full_name}</p>\n                        <p className=\"text-xs text-gray-500 capitalize\">{user.role}</p>\n                      </div>\n                    </DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    {userMenuItems.map((item) => (\n                      <DropdownMenuItem key={item.href} asChild>\n                        <Link href={item.href} className=\"flex items-center space-x-2\">\n                          <item.icon className=\"w-4 h-4\" />\n                          <span>{item.label}</span>\n                        </Link>\n                      </DropdownMenuItem>\n                    ))}\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem className=\"text-red-600 dark:text-red-400\">\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Sign out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              <>\n                <Link href={ROUTES.LOGIN}>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    Sign in\n                  </Button>\n                </Link>\n                <Link href={ROUTES.REGISTER}>\n                  <Button size=\"sm\">\n                    Get Started\n                  </Button>\n                </Link>\n              </>\n            )}\n\n            {/* Mobile Menu Button */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n            >\n              {isMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <motion.div\n            className=\"md:hidden border-t border-gray-200 dark:border-gray-800\"\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: \"auto\" }}\n            exit={{ opacity: 0, height: 0 }}\n          >\n            <div className=\"px-2 pt-2 pb-3 space-y-1\">\n              {/* Mobile Search */}\n              <form onSubmit={handleSearch} className=\"mb-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search servicemen...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10 pr-4 w-full\"\n                  />\n                </div>\n              </form>\n\n              {navItems.map((item) => (\n                <Link key={item.href} href={item.href}>\n                  <div className=\"block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-800\">\n                    {item.label}\n                  </div>\n                </Link>\n              ))}\n              \n              <Link href={ROUTES.HIRE}>\n                <Button className=\"w-full mt-4\">\n                  Hire Now\n                </Button>\n              </Link>\n            </div>\n          </motion.div>\n        )}\n      </div>\n    </motion.nav>\n  );\n}","size_bytes":9680},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}